//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:52
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Ado;
using SinGooCMS.Ado.Interface;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;
using SinGooCMS.Utility;

namespace SinGooCMS.Infrastructure
{
    public class UserFieldRepository : RespositoryBase<UserFieldInfo>, IUserFieldRepository
    {
        private IDbMaintenance dbMaintenance = DbProvider.DbMaintenance;
        public UserFieldRepository()
        {
            //
        }

        #region 增/改/删

        public async Task<Result> AddField(UserGroupInfo group, UserFieldInfo field)
        {
            if (await ExistsAsync(p => p.UserGroupID == field.UserGroupID && p.FieldName == field.FieldName))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在！");

            if (!field.EnableNull && await DbAccess.GetCountAsync(group.TableName) > 0)
                return OperateResult.Fail("Field_HasRowNotEnableNull", "已有数据行不能设置非空列！");

            if (await AddAsync(field) > 0)
            {
                try
                {
                    //添加自定义列
                    dbMaintenance.AddColumn(group.TableName, new DbColumnInfo()
                    {
                        ColumnName = field.FieldName,
                        DataType = field.DataType,
                        Length = field.DataLength,
                        DefaultValue = field.DefaultValue,
                        IsNullable = field.EnableNull
                    });

                    return Result.success;
                }
                catch (Exception ex)
                {
                    return OperateResult.Fail("创建数据列异常:" + ex.Message);
                }
            }

            return Result.fail;
        }

        public async Task<Result> UpdateField(UserGroupInfo group, UserFieldInfo field)
        {
            //sqlite只支持增加列，不支持修改和删除
            if (EnumUtils.StringToEnum<DbType>(ConfigUtils.ProviderName) == DbType.Sqlite)
                return OperateResult.Fail("OperationNotSupported", "操作不支持！");

            if (field.IsSystem)
                return OperateResult.Fail("Field_SysFieldNotAllowModify", "系统字段不能修改！");

            if (await ExistsAsync(p => p.UserGroupID == field.UserGroupID && p.FieldName == field.FieldName && p.AutoID != field.AutoID))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在！");

            var fieldOld = await FindAsync(field.AutoID); //原字段
            if (await UpdateAsync(field))
            {
                try
                {
                    if (fieldOld.FieldName != field.FieldName)
                        dbMaintenance.RenameColumn(group.TableName, fieldOld.FieldName, field.FieldName);

                    dbMaintenance.UpdateColumn(group.TableName, new DbColumnInfo()
                    {
                        ColumnName = field.FieldName,
                        DataType = field.DataType,
                        Length = field.DataLength,
                        DefaultValue = field.DefaultValue,
                        IsNullable = field.EnableNull
                    });

                    return Result.success;
                }
                catch (Exception ex)
                {
                    return OperateResult.Fail("更新数据列异常:" + ex.Message);
                }
            }

            return Result.fail;
        }

        public async Task<Result> DeleteField(UserFieldInfo field)
        {
            //sqlite只支持增加列，不支持修改和删除
            if (EnumUtils.StringToEnum<DbType>(ConfigUtils.ProviderName) == DbType.Sqlite)
                return OperateResult.Fail("OperationNotSupported", "操作不支持！");

            if (field.IsSystem)
                return OperateResult.Fail("Field_SysFieldNotAllowDelete", "系统字段不能删除！");

            try
            {
                var group = await dbo.UserGroup.FindAsync(field.UserGroupID);
                if (await DeleteAsync(field))
                {
                    //删除副表列，列是副表的，非系统的
                    dbMaintenance.DropColumn(group.TableName, field.FieldName);
                    return Result.success;
                }
            }
            catch (Exception ex)
            {
                return OperateResult.Fail("删除数据列异常:" + ex.Message);
            }

            return Result.fail;
        }

        public async Task<bool> DeleteByModelID(int groupId)
        {
            var lstFields = await NoTrackQuery().Where(p => p.UserGroupID == groupId).ToListAsync();
            if (lstFields != null)
            {
                lstFields.ForEach(async item =>
                {
                    await DeleteField(item);
                });

                return true;
            }

            return false;
        }

        #endregion

        #region 读取字段列表        

        public async Task<UserFieldInfo> GetField(int groupID, string FieldName) =>
            await NoTrackQuery().Where(p => p.UserGroupID == groupID && p.FieldName == FieldName).FirstOrDefaultAsync();

        public async Task<IEnumerable<UserFieldInfo>> GetFields(int groupID, bool? isUsing = null, bool? isSystem = null)
        {
            var query = NoTrackQuery().Where(p => p.UserGroupID == groupID);
            if (isUsing != null)
                query = query.Where(p => p.IsUsing == isUsing);
            if (isSystem != null)
                query = query.Where(p => p.IsSystem == isSystem);

            return await query.OrderBy(p => p.Sort).ToListAsync();
        }

        public async Task<IEnumerable<UserFieldInfo>> GetNonSystemFields(int groupId)
        {
            var fields = (List<UserFieldInfo>)((await GetFields(groupId, true, false)) ?? new List<UserFieldInfo>());
            fields.Add(Utils.DefaultUserFieldInfo);
            return fields;
        }

        public async Task<IEnumerable<UserFieldInfo>> GetFieldsWithValue(int groupId, int userID)
        {
            var fields = await GetFields(groupId, true);
            var group = await dbo.UserGroup.FindAsync(groupId);
            var fieldTable = Utils.GetUserFieldTable(userID, group.TableName, fields);

            if (fieldTable != null && fieldTable.Rows.Count > 0)
            {
                fields.ForEach(item =>
                {
                    item.Value = fieldTable.Columns.Contains(item.FieldName)
                                ? fieldTable.Rows[0][item.FieldName].ToString()
                                : item.DefaultValue;
                });
            }
            return fields;
        }

        #endregion

        public async Task<bool> SetEnabled(string fieldIds, bool isUsing = true)
        {
            return await UpdateAsync($"IsUsing={(isUsing ? 1 : 0)}", $" {key} in ({fieldIds}) ");
        }
    }
}