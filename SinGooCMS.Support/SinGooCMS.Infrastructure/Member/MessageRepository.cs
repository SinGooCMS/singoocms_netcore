//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:56
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Text;
using System.Data.Common;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class MessageRepository : RespositoryBase<MessageInfo>, IMessageRepository
    {
        public MessageRepository()
        {
            //
        }

        public async Task<bool> SendMsg(IEnumerable<string> receivers, string msg)
        {
            var sql = $" insert into {tableName}(Receiver,MsgBody,AutoTimeStamp) ";
            var builderSql = new StringBuilder();
            var builderParam = new List<DbParameter>();           

            int intCount = 0;
            int result = 0;
            foreach (string item in receivers)
            {
                builderSql.AppendFormat(" select @Receiver{0},@MsgBody{0},@AutoTimeStamp{0} union all ", intCount);
                builderParam.Add(DbAccess.MakeParam($"@Receiver{intCount}",item));
                builderParam.Add(DbAccess.MakeParam($"@MsgBody{intCount}", msg));
                builderParam.Add(DbAccess.MakeParam($"@AutoTimeStamp{intCount}", DateTime.Now));

                if (intCount % 10 == 0 || (intCount == receivers.Count() - 1))
                {
                    if (await DbAccess.ExecSQLAsync(sql + " " + builderSql.ToString().Trim().Substring(0, builderSql.ToString().Trim().LastIndexOf("union all")),builderParam.ToArray()))
                        result++;

                    builderSql.Remove(0, builderSql.Length);//清空重置
                    builderParam.Clear();
                }

                intCount++;
            }

            return result > 0;
        }

        public async Task<bool> ReadMsg(string ids) =>
            await DbAccess.ExecSQLAsync($" update {tableName} set IsRead=1,ReadTime=@ReadTime where {key} in ({ids})",
                new System.Data.Common.DbParameter[] { DbAccess.MakeParam("@ReadTime", DateTime.Now) });

        public async Task<bool> ReadAll(string receiver) =>
            await DbAccess.ExecSQLAsync($" update {tableName} set IsRead=1,ReadTime=@ReadTime where Receiver=@Receiver ",
                new System.Data.Common.DbParameter[]
                {
                    DbAccess.MakeParam("@ReadTime", DateTime.Now),
                    DbAccess.MakeParam("@Receiver", receiver)
                });

        public async Task<int> GetNewMsgCount(string receiver) =>
            await NoTrackQuery().Where(p => p.Receiver == receiver && !p.IsRead).CountAsync();

    }
}