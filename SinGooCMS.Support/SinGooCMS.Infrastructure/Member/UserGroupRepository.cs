//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:52
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Ado;
using SinGooCMS.Ado.Interface;

namespace SinGooCMS.Infrastructure
{
    public class UserGroupRepository : RespositoryBase<UserGroupInfo>, IUserGroupRepository
    {
        IDbMaintenance dbMaintenance = DbProvider.DbMaintenance;
        private readonly ICacheStore cacheStore;

        public UserGroupRepository(ICacheStore _cacheStore)
        {
            this.cacheStore = _cacheStore;
        }

        #region 增/改/删

        public async Task<Result> AddGroup(string groupName, string viceTableName)
        {
            return await AddGroup(new UserGroupInfo()
            {
                GroupName = groupName,
                TableName = viceTableName,
                AutoTimeStamp = DateTime.Now
            });
        }

        public async Task<Result> AddGroup(UserGroupInfo group)
        {
            var existsResult = await Exists(group.GroupName, group.TableName);
            if (existsResult.ret != ResultType.Success)
                return existsResult;

            int groupId = await AddAsync(group);
            if (groupId > 0)
            {
                try
                {
                    dbMaintenance.CreateTable(group.TableName, new List<DbColumnInfo>() {
                        new DbColumnInfo() { ColumnName = "AutoID",DataType="int", IsIdentity=true,IsPrimarykey=true },
                        new DbColumnInfo()
                        {
                            ColumnName = "UserID",
                            DataType = "int",
                            IsNullable = false,
                            DefaultValue = "0"
                        }
                    });
                    await Utils.AddDefaultField(groupId, "User"); //添加默认字段
                    cache.Del(CacheKey.CKEY_USERGROUP);
                    return Result.success;
                }
                catch (Exception ex)
                {
                    return OperateResult.Fail("创建数据表错误：" + ex.Message);
                }
            }

            return Result.fail;
        }

        public async Task<bool> UpdateGroup(UserGroupInfo group)
        {
            var result = await UpdateAsync(group);
            cache.Del(CacheKey.CKEY_USERGROUP);
            return result;
        }

        public async Task<Result> DelGroup(UserGroupInfo group)
        {
            if (await IsRefingByUser(group.AutoID))
                return OperateResult.Fail("Model_RefingByUser", "会员组被会员引用，无法删除");

            if (await DeleteAsync(group))
            {
                //删除该模型的字段
                await DbAccess.ExecSQLAsync($"delete from cms_UserField where UserGroupID={group.AutoID}");
                //删除自定义表
                dbMaintenance.DropTable(group.TableName);
                
                cache.Del(CacheKey.CKEY_USERGROUP);
                return Result.success;
            }

            return Result.fail;
        }

        #endregion

        public async Task<UserGroupInfo> GetGroup(string groupName) =>
            await NoTrackQuery().Where(p => p.GroupName == groupName).FirstOrDefaultAsync();

        public async Task<UserGroupInfo> GetGroup(int groupId) =>
           await NoTrackQuery().Where(p => p.AutoID == groupId).FirstOrDefaultAsync();

        #region 缓存

        public UserGroupInfo GetCacheGroup(string groupName) =>
            cacheStore.CacheUserGroup.Where(p => p.GroupName == groupName).FirstOrDefault();

        public UserGroupInfo GetCacheGroup(int groupId) =>
           cacheStore.CacheUserGroup.Where(p => p.AutoID == groupId).FirstOrDefault();

        public UserGroupInfo GetCacheDefGroup() =>
            cacheStore.CacheUserGroup.OrderBy(p => p.Sort).FirstOrDefault();

        #endregion

        #region helper

        /// <summary>
        /// 会员组名称和副表表名是唯一的
        /// </summary>
        /// <param name="modelName"></param>
        /// <param name="tableName"></param>
        /// <returns></returns>
        private async Task<Result> Exists(string groupName, string tableName)
        {
            if (await NoTrackQuery().Where(p => p.GroupName == groupName).AnyAsync())
                return OperateResult.Fail("Model_UserGroupNameExists", "会员组名称已存在");
            else if (await NoTrackQuery().Where(p => p.TableName == tableName).AnyAsync())
                return OperateResult.Fail("Model_DataTableNameExists", "数据表名已存在");
            else if (dbMaintenance.ExistsTable(tableName))
                OperateResult.Fail("Model_TableExists", "数据表已存在");

            return Result.success; ;
        }

        /// <summary>
        /// 是否被会员引用
        /// </summary>
        /// <param name="groupID"></param>
        /// <returns></returns>
        private async Task<bool> IsRefingByUser(int groupID) =>
            await dbo.User.AsNoTracking().Where(p => p.GroupID == groupID).AnyAsync();

        #endregion
    }
}