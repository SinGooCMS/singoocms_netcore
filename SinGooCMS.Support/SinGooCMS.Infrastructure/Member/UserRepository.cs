//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:52
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Text;
using System.Linq;
using System.Data;
using System.Data.Common;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Ado;
using SinGooCMS.Utility.Extension;
using SinGooCMS.Utility;

namespace SinGooCMS.Infrastructure
{
    public class UserRepository : RespositoryBase<UserInfo>, IUserRepository
    {
        private readonly IUserGroupRepository userGroupRepository;
        private readonly IUserFieldRepository userFieldRepository;
        private readonly IAccountDetailRepository accountDetailRepository;
        private readonly IEventLogRepository eventLogRepository;
        private readonly IMessageRepository messageRepository;
        private readonly ICacheStore cacheStore;

        public UserRepository(
            IUserGroupRepository _userGroupRepository,
            IUserFieldRepository _userFieldRepository,
            IAccountDetailRepository _accountDetailRepository,
            IEventLogRepository _eventLogRepository,
            IMessageRepository _messageRepository,
            ICacheStore _cacheStore
            )
        {
            this.userGroupRepository = _userGroupRepository;
            this.userFieldRepository = _userFieldRepository;
            this.accountDetailRepository = _accountDetailRepository;
            this.eventLogRepository = _eventLogRepository;
            this.messageRepository = _messageRepository;
            this.cacheStore = _cacheStore;
        }

        #region 会员注册

        public async Task<(Result OpResult, int UserId)> Reg(UserInfo userInfo)
        {
            var dicField = new Dictionary<string, UserFieldInfo>();
            return await Reg(userInfo, dicField);
        }

        public async Task<(Result OpResult, int UserId)> Reg(UserInfo userInfo, Dictionary<string, UserFieldInfo> dicField)
        {
            if (userInfo.GroupID.Equals(0) || userInfo.LevelID.Equals(0))
                return (OperateResult.Fail("Reg_MemberInfoNotComplete", "会员信息不完整，会员组及会员等级信息不可缺少"), -1);
            else if (cacheStore.CacheBaseConfig.SysUserName.Split(',').Contains(userInfo.UserName))
                return (OperateResult.Fail("Reg_SystemRetainsUserName", "系统保留会员名称，请选择其它会员名称"), -1);
            else if (!IsValidUserName(userInfo.UserName) && !userInfo.UserName.IsEmail() && !userInfo.UserName.IsMobile())
                return (OperateResult.Fail("User_UserNameInvalid", "无效的用户名称"), -1);
            else if (await IsExistsName(userInfo.UserName))
                return (OperateResult.Fail("User_UserNameExists", "用户名已存在！"), -1);
            else if (!userInfo.Email.IsNullOrEmpty() && !userInfo.Email.IsEmail())
                return (OperateResult.Fail("User_EmailFormatIncorrect", "邮箱地址格式不正确"), -1);
            else if (await IsExistsEmail(userInfo.Email))
                return (OperateResult.Fail("User_EmailExists", "邮箱地址已存在！"), -1);
            else if (!userInfo.Mobile.IsNullOrEmpty() && !userInfo.Mobile.IsMobile())
                return (OperateResult.Fail("User_MobileFormatIncorrect", "手机号码格式不正确"), -1);
            else if (await IsExistsMobile(userInfo.Mobile))
                return (OperateResult.Fail("User_MobileExists", "手机号码已存在！"), -1);
            else if (userInfo.Password.Length < 6)
                return (OperateResult.Fail("User_UserPwdLenNeed", "密码长度不少于6位"), -1);
            else
            {
                var group = userGroupRepository.GetCacheGroup(userInfo.GroupID);
                userInfo = SetValue(userInfo, dicField);

                //会员空间容量 默认100M
                if (userInfo.FileSpace.Equals(0))
                    userInfo.FileSpace = (int)cacheStore.CacheBaseConfig.FileCapacity;

                //加密
                userInfo.Password = GetEncodePwd(userInfo.Password);
                if (!userInfo.PayPassword.IsNullOrEmpty())
                    userInfo.PayPassword = GetEncodePwd(userInfo.PayPassword);

                userInfo.AutoTimeStamp = DateTime.Now;
                int userId = await AddAsync(userInfo);
                if (userId > 0)
                {
                    #region 添加副表信息

                    var customFields = await userFieldRepository.GetNonSystemFields(group.AutoID);
                    customFields.ForEach(item =>
                    {
                        item.Value = item.FieldName == "UserID"
                        ? userId.ToString()
                        : dicField.GetSafeValue(item.FieldName).Value ?? string.Empty;
                    });
                    await AddOrUpdateCustomTBInfo(group.TableName, customFields);

                    #endregion

                    #region 赠送积分

                    if (cacheStore.CacheBaseConfig.RegGiveIntegral > 0)
                    {
                        var copyUser = userInfo.DeepClone();
                        copyUser.AutoID = userId;
                        await accountDetailRepository.AddIntegral(copyUser, 1, cacheStore.CacheBaseConfig.RegGiveIntegral, "注册赠送积分");
                    }

                    #endregion

                    #region 发送站内欢迎消息

                    var setting = cacheStore.CacheBaseConfig.GetByKey("SendRegWelcome");
                    if (setting != null)
                    {
                        var lstReciver = new List<string>() { userInfo.UserName };
                        await messageRepository.SendMsg(lstReciver, setting.KeyValue.Replace("${username}", userInfo.UserName));
                    }

                    #endregion

                    return (Result.success, userId);
                }
            }

            return (Result.fail, -1);
        }

        #endregion

        #region 会员登录

        public async Task<(Result OpResult, UserInfo UserReturn)> UserLogin(string loginName, string password)
        {
            //用户名登录
            var user = await NoTrackQuery().Where(p => p.UserName == loginName).FirstOrDefaultAsync();
            //最后登录记录
            var lastLoginLog = await eventLogRepository.GetLatestLoginLog(loginName, UserType.User);
            //加密的密码串
            var encryPassword = GetEncodePwd(password);

            if (user == null)
                return (OperateResult.Fail("Login_UserNameIncorrect", "用户名不正确"), null);
            else if (lastLoginLog != null && (System.DateTime.Now - lastLoginLog.AutoTimeStamp).GetValueOrDefault().TotalSeconds < 1)
                return (OperateResult.Fail("Login_LoginTooFrequently", "登录频率太频繁"), null);
            else if (lastLoginLog != null && lastLoginLog.LoginFailCount >= cacheStore.CacheBaseConfig.TryLoginTimes
                && (System.DateTime.Now - lastLoginLog.AutoTimeStamp).GetValueOrDefault().TotalMinutes < 5)
                return (OperateResult.Fail("Login_LoginFailTooMany", "连续多次登录失败,5分钟内禁止登录"), null);
            else if (encryPassword != user.Password)
                return (OperateResult.Fail("Login_PasswordIncorrect", "密码不正确"), null);
            else if (user.Status != (int)UserStatus.Normal)
                return (OperateResult.Fail("Login_StatusNotAllow", "账户未审核"), null);
            else
                return (OperateResult.success, user);
        }

        public string GetEncodePwd(string origialPwd) =>
            DEncryptUtils.MD5Encrypt(DEncryptUtils.MD5Encrypt(origialPwd));

        #endregion

        #region 会员更新

        public async Task<Result> Update(UserInfo userInfo, Dictionary<string, UserFieldInfo> dicField)
        {
            if (await IsExistsName(userInfo.UserName, userInfo.AutoID))
                return OperateResult.Fail("User_UserNameExists", "用户名已存在！");

            if (await IsExistsEmail(userInfo.Email, userInfo.AutoID))
                return OperateResult.Fail("User_EmailExists", "邮箱地址已存在！");

            if (await IsExistsMobile(userInfo.Mobile, userInfo.AutoID))
                return OperateResult.Fail("User_MobileExists", "手机号码已存在！");

            var group = userGroupRepository.GetCacheGroup(userInfo.GroupID);
            userInfo = SetValue(userInfo, dicField);

            if (await UpdateAsync(userInfo))
            {
                #region 更新副表

                var customFields = await userFieldRepository.GetNonSystemFields(group.AutoID);
                customFields.ForEach(item =>
                {
                    item.Value = item.FieldName == "UserID"
                    ? userInfo.AutoID.ToString()
                    : dicField.GetSafeValue(item.FieldName).Value ?? string.Empty;
                });

                await AddOrUpdateCustomTBInfo(group.TableName, customFields, userInfo.AutoID);

                #endregion

                return Result.success;
            }

            return Result.fail;
        }

        public async Task<bool> UpdateEmail(string emailAddress, int userId) =>
           await DbAccess.ExecSQLAsync($"update {tableName} set Email=@Email where {key}=@key", new DbParameter[] {
                DbAccess.MakeParam("@Email",emailAddress),
                DbAccess.MakeParam("@key",userId)
           });

        public async Task<bool> UpdateMobile(string mobileNo, int userId) =>
           await DbAccess.ExecSQLAsync($"update {tableName} set Mobile=@Mobile where {key}=@key", new DbParameter[] {
                DbAccess.MakeParam("@Mobile",mobileNo),
                DbAccess.MakeParam("@key",userId)
           });

        public async Task<bool> UpdateAvatar(string avatar, int userId) =>
           await DbAccess.ExecSQLAsync($"update {tableName} set HeaderPhoto=@HeaderPhoto where {key}=@key", new DbParameter[] {
                DbAccess.MakeParam("@HeaderPhoto",avatar),
                DbAccess.MakeParam("@key",userId)
           });

        public async Task<bool> UpdateLoginNum(int userId) =>
            await DbAccess.ExecSQLAsync($"update {tableName} set LoginCount=LoginCount+1 where {key}=@key", new DbParameter[] {
                DbAccess.MakeParam("@key",userId)
           });

        public async Task<bool> UpdatePassword(int userId, string encryPassword) =>
            await DbAccess.ExecSQLAsync($"update {tableName} set Password=@Password where {key}=@key", new DbParameter[] {
                DbAccess.MakeParam("@Password",encryPassword),
                DbAccess.MakeParam("@key",userId)
           });

        public async Task<bool> UpdateSafePassword(int userId, string encryPassword) =>
             await DbAccess.ExecSQLAsync($"update {tableName} set PayPassword=@PayPassword where {key}=@key", new DbParameter[] {
                DbAccess.MakeParam("@PayPassword",encryPassword),
                DbAccess.MakeParam("@key",userId)
           });

        #endregion

        #region 获取会员信息

        public async Task<UserInfo> GetFullUserInfo(int userId)
        {
            var user = await FindAsync(userId);
            if (user != null)
            {
                var group = userGroupRepository.GetCacheGroup(user.GroupID);
                user.CustomTable = GetCustomTBInfo(userId, group.TableName);
            }

            return user;
        }

        public async Task<UserInfo> GetUserByName(string userName) =>
           await NoTrackQuery().Where(p => p.UserName == userName).FirstOrDefaultAsync();

        public async Task<UserInfo> GetUserByEmail(string email) =>
           await NoTrackQuery().Where(p => p.Email == email).FirstOrDefaultAsync();

        public async Task<UserInfo> GetUserByMobile(string mobile) =>
           await NoTrackQuery().Where(p => p.Mobile == mobile).FirstOrDefaultAsync();

        #endregion

        #region 会员判断

        public async Task<bool> IsExistsName(string userName, int userId = 0)
        {
            if (userName.IsNullOrEmpty())
                return false;

            return userId > 0
            ? await ExistsAsync(p => p.UserName == userName && p.AutoID != userId)
            : await ExistsAsync(p => p.UserName == userName);
        }

        public async Task<bool> IsExistsEmail(string email, int userId = 0)
        {
            if (email.IsNullOrEmpty())
                return false;

            return userId > 0
            ? await ExistsAsync(p => p.Email == email && p.AutoID != userId)
            : await ExistsAsync(p => p.Email == email);
        }

        public async Task<bool> IsExistsMobile(string mobile, int userId = 0)
        {
            if (mobile.IsNullOrEmpty())
                return false;

            return userId > 0
            ? await ExistsAsync(p => p.Mobile == mobile && p.AutoID != userId)
            : await ExistsAsync(p => p.Mobile == mobile);
        }


        public bool IsValidUserName(string userName) =>
            new Regex(cacheStore.CacheBaseConfig.UserNameRule).Match(userName).Success;

        #endregion

        #region 删除会员同时删除副表

        public bool DeleteAll(string ids)
        {
            ids.ToIntArray().ForEach(async item =>
            {
                await DelFullUserInfo(item);
            });

            return true;
        }

        public async Task<bool> DelFullUserInfo(int userId) => await DelFullUserInfo(await FindAsync(userId));

        public async Task<bool> DelFullUserInfo(string userName) => await DelFullUserInfo(await GetUserByName(userName));

        private async Task<bool> DelFullUserInfo(UserInfo userInfo)
        {
            if (userInfo != null)
            {
                var group = userGroupRepository.GetCacheGroup(userInfo.GroupID);
                var lstSql = new Dictionary<string, DbParameter[]>();
                //主表
                lstSql.Add($"delete from cms_User where AutoID=@Key1;",new DbParameter[] { DbAccess.MakeParam("@Key1", userInfo.AutoID) });
                //副表
                if (group != null && !group.TableName.IsNullOrEmpty())
                    lstSql.Add($"delete from {group.TableName} where UserID=@Key2;", new DbParameter[] { DbAccess.MakeParam("@Key2", userInfo.AutoID) });
                //站内消息
                lstSql.Add($"delete from sys_Message where Receiver=@Receiver;", new DbParameter[] { DbAccess.MakeParam("@Receiver", userInfo.UserName) });
                //账户明细
                lstSql.Add($"delete from cms_AccountDetail where UserID=@Key3;", new DbParameter[] { DbAccess.MakeParam("@Key3", userInfo.AutoID) });

                await DbAccess.ExecTransAsync(lstSql);
                return true;
            }

            return false;
        }

        #endregion

        #region 导出会员

        public DataTable GetExportUser(string condition)
        {
            var builder = new StringBuilder();
            builder.Append(@"SELECT AutoID AS 编号,UserName AS 用户名称,Email as 电子邮箱,Mobile as 手机号码,
                           RealName AS 真实姓名,Gender as 性别,Birthday as 出生日期,
                           AutoTimeStamp as 注册时间,LoginCount as 登录次数,LastLoginTime AS 最后登录时间
                           FROM cms_User ");
            if (condition.IsNullOrEmpty())
                builder.Append(" WHERE " + condition);
            builder.Append(" ORDER BY LastLoginTime desc ");

            return DbAccess.GetDataTable(builder.ToString());
        }

        #endregion

        #region helper

        /// <summary>
        /// 增加或者更新副表信息
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="fieldsWithVal"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private async Task<bool> AddOrUpdateCustomTBInfo(string tableName, IEnumerable<UserFieldInfo> fieldsWithVal, int userId = 0)
        {
            if (!await IsInCustomTB(userId, tableName))
            {
                string commandText = Utils.GenerateSqlOfInsert(tableName, fieldsWithVal);
                var parameters = Utils.PrepareSqlParameters(fieldsWithVal);
                return await DbAccess.ExecSQLAsync(commandText, parameters);
            }
            else
            {
                string commandText = Utils.GenerateSqlOfUpdate(tableName, fieldsWithVal, "UserID", userId);
                var parameters = Utils.PrepareSqlParameters(fieldsWithVal);
                return await DbAccess.ExecSQLAsync(commandText, parameters);
            }
        }

        /// <summary>
        /// 设置会员信息
        /// </summary>
        /// <param name="user"></param>
        /// <param name="dicField"></param>
        /// <returns></returns>
        private UserInfo SetValue(UserInfo user, Dictionary<string, UserFieldInfo> dicField)
        {
            if (dicField == null)
                return user;

            var propers = typeof(UserInfo).GetProperties();
            propers.ForEach(item =>
            {
                if (dicField.ContainsKey(item.Name))
                {
                    if (item.PropertyType == typeof(bool))
                        item.SetValue(user, dicField.GetSafeValue(item.Name).Value.ToBool());
                    else if (item.PropertyType == typeof(int) || item.PropertyType == typeof(long))
                        item.SetValue(user, dicField.GetSafeValue(item.Name).Value.ToInt());
                    else if (item.PropertyType == typeof(decimal) || item.PropertyType == typeof(double) || item.PropertyType == typeof(float))
                        item.SetValue(user, dicField.GetSafeValue(item.Name).Value.ToDecimal());
                    else if (item.PropertyType == typeof(DateTime) || item.PropertyType == typeof(DateTime?))
                        item.SetValue(user, dicField.GetSafeValue(item.Name).Value.ToDateTime());
                    else
                        item.SetValue(user, dicField.GetSafeValue(item.Name).Value);
                }
            });

            return user;
        }

        /// <summary>
        /// 获取副表信息
        /// </summary>
        /// <param name="contID">内容ID</param>
        /// <param name="tableName">副表表名</param>
        /// <returns></returns>
        private DataTable GetCustomTBInfo(int userId, string tableName) =>
            DbAccess.GetDataTable($"select * from {tableName} where UserID={userId}");

        /// <summary>
        /// 是否存在副表
        /// </summary>
        /// <param name="userID"></param>
        /// <param name="tableName"></param>
        /// <returns></returns>
        private async Task<bool> IsInCustomTB(int userID, string tableName) =>
           await DbAccess.GetValueAsync<int>($"select count(*) from {tableName} where UserID={userID}") > 0;

        #endregion
    }
}