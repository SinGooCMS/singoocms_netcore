//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:50
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Ado;
using SinGooCMS.Domain;
using SinGooCMS.Utility.Extension;
using SinGooCMS.Utility;

namespace SinGooCMS.Infrastructure
{
    public class FeedbackRepository : RespositoryBase<FeedbackInfo>, IFeedbackRepository
    {
        public FeedbackRepository()
        {
            //
        }

        public async Task<bool> Send(string content, string userName, FeedbackInfo topic = null, string title = "", string email = "", string phone = "")
        {
            var entity = new FeedbackInfo()
            {
                RootID = 0,
                ReplyID = 0,
                UserID = -1,
                UserName = userName,
                Title = title,
                Content = content,
                Email = email,
                Phone = phone,
                IPAddress = IPUtils.GetIP(),
                IPArea = IPUtils.GetIPAreaStr().Replace("[本机地址 CZ88.NET]", "本机地址").Replace("本机地址 CZ88.NET", "本机地址"),
                IsAudit = true,
                Lang = SinGooBase.CurrLang,
                AutoTimeStamp = DateTime.Now
            };

            //如果标题为空，取内容部分作为标题
            if (entity.Title.IsNullOrEmpty())
            {
                entity.Title = entity.Content.RemoveHtml();
                if (entity.Title.Length > 15)
                    entity.Title = entity.Title.Substring(0, 15);
            }

            //作为回复
            if (topic != null)
            {
                entity.RootID = topic.RootID;
                entity.ReplyID = topic.AutoID;
            }

            int newId = await AddAsync(entity);
            if (newId > 0)
            {
                //更新RootID
                if (topic == null)
                    await UpdateAsync($"RootID={newId}", $"AutoID={newId}");

                return true;
            }

            return false;
        }

        public async Task<bool> DelTopicAsync(int rootId) =>
            await DbAccess.ExecSQLAsync($"delete from {tableName} where RootID={rootId}");

        public async Task<bool> DelMutli(string ids)
        {
            var lst = await dbSet.Where(p => ids.ToIntArray(',').Contains(p.AutoID)).ToListAsync();
            foreach (var item in lst)
            {
                if (item.AutoID == item.RootID)
                    await DelTopicAsync(item.AutoID); //删除主题及回复
                else
                    await DeleteAsync(item); //删除回复
            }

            return true;
        }

        public async Task<PagerModel<IEnumerable<FeedbackInfo>>> GetPagerWithReplyCount(string condition, string sort, int pageIndex, int pageSize)
        {
            string filter = "*,(select COUNT(*) from cms_Feedback as b where b.ReplyID=SinGooPagerAlias.AutoID) as ReplyCount";
            return await GetPagerListAsync(condition, sort, pageIndex, pageSize, filter);
        }
    }
}