//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:53
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class VoteRepository : RespositoryBase<VoteInfo>, IVoteRepository
    {
        public VoteRepository()
        {
            //
        }

        #region 删除

        public async Task<bool> DelVote(VoteInfo voteInfo)
        {
            if (await DeleteAsync(voteInfo.AutoID))
            {
                if (voteInfo.VoteItems != null)
                {
                    var builder = new System.Text.StringBuilder();
                    voteInfo.VoteItems.ForEach(item =>
                    {
                        builder.Append($"'{item}',");
                    });
                    await DbAccess.ExecSQLAsync($" delete from cms_VoteLog where VoteItemID in ({builder.ToString().TrimEnd(',')}) ");
                }

                return true;
            }

            return false;
        }

        public async Task<bool> DelVotes(string ids)
        {
            foreach (var item in ids.ToIntArray())
                await DelVote(await FindAsync(item));

            return true;
        }

        #endregion

        public async Task<VoteInfo> GetVoteFull(int voteId)
        {
            var vote = await FindAsync(voteId);
            if (vote != null)
            {
                for (var i = 0; i < vote.VoteItems.Count; i++)
                {
                    vote.VoteItems[i].VoteNum = await dbo.VoteLog.CountAsync(p => p.VoteItemID.Equals(vote.VoteItems[i].ItemID));
                }

                //已有投票总数
                int voteTotal = vote.VoteItems.Sum(p => p.VoteNum);

                //计算投票占比
                for (var i = 0; i < vote.VoteItems.Count; i++)
                {
                    vote.VoteItems[i].Proportion = voteTotal == 0 ? 0 : (vote.VoteItems[i].VoteNum / voteTotal) * 100;
                }

                return vote;
            }

            return null;
        }
    }
}