//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:53
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class VoteLogRepository : RespositoryBase<VoteLogInfo>, IVoteLogRepository
    {
        private readonly ICMSContext cMSContext;
        private readonly IUser user;

        public VoteLogRepository(ICMSContext _cMSContext, IUser _user)
        {
            this.cMSContext = _cMSContext;
            this.user = _user;
        }

        public async Task<Result> Vote(VoteInfo voteInfo, string itemId)
        {
            var voteItemInfo = voteInfo.VoteItems.Where(p => p.ItemID == itemId).FirstOrDefault();

            var logInfo = new VoteLogInfo()
            {
                VoteID = voteInfo.AutoID,
                VoteItemID = itemId,
                VoteItemOption = voteItemInfo?.VoteOption,
                UserID = user.UserID,
                UserName = user.UserName,
                IpAddress = cMSContext.IP,
                IpArea = cMSContext.IPArea.Value,
                Lang = cMSContext.CurrLang,
                AutoTimeStamp = DateTime.Now
            };

            if (!voteInfo.IsAudit)
                return OperateResult.Fail("Vote_Closed", "投票已关闭");
            else if (voteItemInfo == null)
                return OperateResult.Fail("Vote_ItemNotMatchMain", "投票选项与主体信息不匹配");
            else if (logInfo.VoteItemID.IsNullOrEmpty())
                return OperateResult.Fail("Vote_OneVoteRequire", "请选择至少一个投票项");
            else if (!voteInfo.IsAnonymous && user.LoginUser.Value == null)
                return OperateResult.Fail("OperationNeedLogin", "操作要求首先登录！");
            else if (await HasUserVote(voteInfo.AutoID, logInfo.VoteItemID, logInfo.UserID))
                return OperateResult.Fail("Vote_YouHasVoted", "您已经投过票，请勿重复投票");
            else if (await HasIpVote(voteInfo.AutoID, logInfo.VoteItemID, logInfo.IpAddress))
                return OperateResult.Fail("Vote_YouHasVoted", "您已经投过票，请勿重复投票");
            else
            {
                return (await AddAsync(logInfo)) > 0
                ? Result.success
                : Result.fail;
            }
        }

        public async Task<bool> HasUserVote(int voteId, string itemId, int userId)
        {
            var voteInfo = await dbo.Vote.FindAsync(voteId);
            if (voteInfo != null)
            {
                return voteInfo.VoteItems.Where(p => p.ItemID == itemId).Any()
                    && await NoTrackQuery().Where(p => voteInfo.ItemKeys.Contains(p.VoteItemID) && p.UserID == userId).AnyAsync();
            }

            return true;
        }

        public async Task<bool> HasIpVote(int voteId, string itemId, string ip)
        {
            var voteInfo = await dbo.Vote.FindAsync(voteId);
            if (voteInfo != null)
            {
                return voteInfo.VoteItems.Where(p => p.ItemID == itemId).Any()
                    && await NoTrackQuery().Where(p => voteInfo.ItemKeys.Contains(p.VoteItemID) && p.IpAddress == ip).AnyAsync();
            }

            return true;
        }

        public async Task<bool> DelByItem(string itemId)
        {
            var rangs = NoTrackQuery().Where(p => p.VoteItemID == itemId).ToArray();
            dbSet.RemoveRange(rangs);
            return await dbo.SaveChangesAsync() > 0;
        }
    }
}