//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:51
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Xml;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Ado;
using SinGooCMS.Utility;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class NodeRepository : RespositoryBase<NodeInfo>, INodeRepository
    {
        private readonly ICacheStore cacheStore;
        public NodeRepository(ICacheStore _cacheStore)
        {
            this.cacheStore = _cacheStore;
        }

        #region 增删改

        public async Task<(Result OpResult, int NodeId)> AddNode(NodeInfo node, NodeInfo nodeParent = null)
        {
            if (node.NodeName.IndexOf("&") > 0 || node.NodeIdentifier.IndexOf("&") > 0)
                return (OperateResult.Fail("CharacterInvalid", "存在非法的字符&"), -1);

            if (await Exists(node))
                return (OperateResult.Fail("Node_NodeCodeExists", "栏目标识已存在！"), -1);

            //if ((node.ParentID > 0 && nodeParent == null) || (nodeParent != null && nodeParent.AutoID != node.ParentID))
            //    return (OperateResult.Fail("Node_ParentNodeNotExists", "上级栏目不存在"), -1);

            node.ParentID = nodeParent?.AutoID ?? 0; //上级栏目

            node.ParentPath = nodeParent != null
                ? nodeParent.ParentPath + "," + nodeParent.AutoID.ToString()
                : "0";

            node.Depth = node.ParentPath.Split(',').Length;

            if (node.NodeSetting == null)
                node.Setting = new Domain.NodeSetting().ToJson();

            node.AutoTimeStamp = DateTime.Now;
            node.AutoID = await AddAsync(node);
            if (node.AutoID > 0)
            {
                node.ChildList = node.AutoID.ToString();
                //更新当前栏目的ChildList 因为是新增的，所以子栏目列表是自己
                if (await UpdateAsync($"ChildList='{node.AutoID}'", $"AutoID={node.AutoID}"))
                {
                    if (node.ParentID > 0)
                        await UpdateParentsChildList(node); //更新所有上级的子栏目列表
                }

                cache.Del(CacheKey.CKEY_CMSNODE);
                return (Result.success, node.AutoID);
            }

            return (Result.fail, -1);
        }

        public async Task<Result> UpdateNode(NodeInfo node)
        {
            if (await Exists(node, true))
                return OperateResult.Fail("Node_NodeCodeExists", "栏目标识已存在！");

            if (await UpdateAsync(node))
            {
                cache.Del(CacheKey.CKEY_CMSNODE);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<bool> UpdateNodeSort(Dictionary<int, int> dictIDAndSort)
        {
            var result = await UpdateSortAsync(dictIDAndSort);
            cache.Del(CacheKey.CKEY_CMSNODE);
            return result;
        }

        public async Task<Result> DeleteNode(NodeInfo node)
        {
            if (node.ChildCount > 0)
                return OperateResult.Fail("Node_ChildNodeExists", "存在下级栏目");

            if (await HasContent(node.AutoID))
                return OperateResult.Fail("Node_OwnContentExists", "存在内容");

            if (await DeleteAsync(node))
            {
                /*
                 * 子栏目被删除时，所有的上级栏目ChildList需要移除此栏目的ID
                 * 如上级栏目ChildList="1,2,3,4,5" 移除后 ChildList="1,2,3,4"
                 */
                if (node.ParentID > 0)
                    await UpdateParentsChildList(node, true);

                cache.Del(CacheKey.CKEY_CMSNODE);
                return Result.success;
            }

            return Result.fail;
        }

        #endregion

        #region 读取缓存栏目列表

        public IEnumerable<NodeInfo> GetCacheNodesByModeID(int modelID) =>
            cacheStore.CacheNodes.Where(p => p.ModelID == modelID);

        public IEnumerable<NodeInfo> GetCachedNodes(string ids) =>
            cacheStore.CacheNodes.Where(p => ids.ToIntArray().Contains(p.AutoID));

        public IEnumerable<NodeInfo> GetCacheAllChildNodes(int parentID, bool? showOnMenu = null)
        {
            var parentNode = GetCacheNode(parentID);
            if (parentNode != null)
            {
                return showOnMenu == null
                ? cacheStore.CacheNodes.Where(p => parentNode.ChildList.ToIntArray().Contains(p.AutoID))
                : cacheStore.CacheNodes.Where(p => parentNode.ChildList.ToIntArray().Contains(p.AutoID) && p.IsShowOnMenu == showOnMenu);
            }

            return null;
        }

        public IEnumerable<NodeInfo> GetCacheAllChildNodes(string parentIdentifier = null, bool? showOnMenu = null)
        {
            if (parentIdentifier == null)
                return GetCacheAllChildNodes(0, showOnMenu);

            var parentNode = GetCacheNode(parentIdentifier);
            if (parentNode != null)
            {
                return showOnMenu == null
                ? cacheStore.CacheNodes.Where(p => parentNode.ChildList.ToIntArray().Contains(p.AutoID))
                : cacheStore.CacheNodes.Where(p => parentNode.ChildList.ToIntArray().Contains(p.AutoID) && p.IsShowOnMenu == showOnMenu);
            }

            return null;
        }

        public IEnumerable<NodeInfo> GetCacheChildNodes(int parentID, bool? showOnMenu = null)
        {
            return showOnMenu == null
                ? cacheStore.CacheNodes.Where(p => p.ParentID == parentID)
                : cacheStore.CacheNodes.Where(p => p.ParentID == parentID && p.IsShowOnMenu == showOnMenu);
        }


        public IEnumerable<NodeInfo> GetCacheChildNodes(string parentIdentifier = null, bool? showOnMenu = null)
        {
            if (parentIdentifier == null)
                return GetCacheChildNodes(0, showOnMenu);

            var node = GetCacheNode(parentIdentifier);
            if (node != null)
            {
                return showOnMenu == null
                ? cacheStore.CacheNodes.Where(p => p.ParentID == node.AutoID)
                : cacheStore.CacheNodes.Where(p => p.ParentID == node.AutoID && p.IsShowOnMenu == showOnMenu);
            }

            return null;
        }

        #endregion

        #region 获取缓存栏目信息        

        public NodeInfo GetCacheNodeFull(int nodeID)
        {
            var node = cacheStore.CacheNodes.Where(p => p.AutoID == nodeID).FirstOrDefault();
            if (node != null)
            {
                node.ParentNode = cacheStore.CacheNodes.Where(p => p.AutoID == node.ParentID).FirstOrDefault();
                node.ChildNodes = cacheStore.CacheNodes.Where(p => p.ParentID == node.AutoID).ToList();
            }

            return node;
        }

        public NodeInfo GetCacheNodeFull(string nodeIdentifier)
        {
            var node = cacheStore.CacheNodes.Where(p => p.NodeIdentifier == nodeIdentifier).FirstOrDefault();
            if (node != null)
            {
                node.ParentNode = cacheStore.CacheNodes.Where(p => p.AutoID == node.ParentID).FirstOrDefault();
                node.ChildNodes = cacheStore.CacheNodes.Where(p => p.ParentID == node.AutoID).ToList();
            }

            return node;
        }

        public NodeInfo GetCacheNode(int nodeID) =>
            cacheStore.CacheNodes.Where(p => p.AutoID == nodeID).FirstOrDefault();

        public NodeInfo GetCacheNode(string nodeIdentifier) =>
            cacheStore.CacheNodes.Where(p => p.NodeIdentifier == nodeIdentifier).FirstOrDefault();

        public NodeInfo GetCacheDefultNode(Func<NodeInfo, bool> condition = null)
        {
            return condition == null
                ? cacheStore.CacheNodes.FirstOrDefault()
                : cacheStore.CacheNodes.Where(condition).FirstOrDefault();
        }

        #endregion

        #region 栏目树

        public IEnumerable<NodeInfo> GetNodeTree() =>
            GetNodeTree(cacheStore.CacheNodes, 0);

        public IEnumerable<NodeInfo> GetNodeTree(IEnumerable<NodeInfo> nodes, int parentID) =>
            GetRelationNodes(nodes.DeepClone(), parentID);

        private IEnumerable<NodeInfo> GetRelationNodes(IEnumerable<NodeInfo> nodes, int parentID)
        {
            var lstChilds = nodes.Where(p => p.ParentID == parentID);
            var lstResult = new List<NodeInfo>();
            int counter = 0;

            lstChilds.ForEach(item =>
            {
                if (counter == lstChilds.Count() - 1)
                    item.NodeName = (item.ParentID == 0 ? "" : StringUtils.GetCatePrefix(item.Depth - 1, true)) + StringUtils.GetChineseSpell(item.NodeName).Substring(0, 1) + item.NodeName;
                else
                    item.NodeName = (item.ParentID == 0 ? "" : StringUtils.GetCatePrefix(item.Depth - 1, false)) + StringUtils.GetChineseSpell(item.NodeName).Substring(0, 1) + item.NodeName;

                lstResult.Add(item);
                if (item.ChildCount > 0)
                    lstResult.AddRange(GetRelationNodes(nodes, item.AutoID)); //递归调用

                counter++;
            });

            return lstResult;
        }

        public IEnumerable<NodeInfo> GetNodeNavigate(string parentPath)
        {
            var lstNodes = cacheStore.CacheNodes.Where(p => parentPath.ToIntArray().Contains(p.AutoID))
                .OrderBy(p => p.Depth)
                .OrderBy(p => p.Sort)
                .OrderByDescending(p => p.AutoID);

            return from m in lstNodes
                   select new NodeInfo
                   {
                       AutoID = m.AutoID,
                       NodeIdentifier = m.NodeIdentifier,
                       NodeName = m.NodeName
                   };
        }

        #endregion

        #region 栏目移动

        public async Task<Result> NodeMove(NodeInfo nodeSource, NodeInfo nodeTarget)
        {
            /*
             * 栏目的移动主要是层级关系的变化
             * 需要改变的是上下级关系
             */

            if (nodeSource == null)
                return OperateResult.Fail("NodeMove_SelectTheSourceNode", "请选择源栏目");

            if (nodeSource.AutoID == nodeTarget?.AutoID)
                return OperateResult.Fail("NodeMove_SourceAndTargetEqual", "源栏目与目标栏目相同");

            if (nodeSource.ChildList.ToIntArray().Contains(nodeTarget?.AutoID ?? 0))
                return OperateResult.Fail("NodeMove_CannotMoveToChilds", "不能移动到自己的子栏目下");

            //源栏目（未更新之前的）
            var nodeOrinigal = nodeSource.DeepClone<NodeInfo>();

            //更新本栏目
            nodeSource.ParentID = nodeTarget?.AutoID ?? 0;
            nodeSource.ParentPath = nodeTarget != null ? nodeTarget.ParentPath + "," + nodeTarget.AutoID.ToString() : "0";
            nodeSource.Depth = nodeSource.ParentPath.Split(',').Length;

            //更新当前栏目
            if (await UpdateAsync(nodeSource))
            {
                //从原上级移走，原上级直到根目录的ChildList都要移出此栏目
                if (nodeOrinigal.ParentID > 0)
                    await UpdateParentsChildList(nodeOrinigal, true);

                //移入到现在的上级，现上级直到根目录的ChildList都要移入此栏目
                if (nodeSource.ParentID > 0)
                    await UpdateParentsChildList(nodeSource);

                //更新下级，当前栏目的ParentPath已经改变，所有下级的ParentPath跟着改变
                await UpdateChildsParentPath(nodeSource);

                cache.Del(CacheKey.CKEY_CMSNODE);
                return Result.success;
            }

            return Result.fail;
        }

        #endregion

        #region 单页文章

        public async Task<ContentInfo> GetSingleCont(int nodeID, ContStatus status = ContStatus.Normal)
        {
            return await dbo.Content.AsNoTracking().Where(p => p.NodeID == nodeID && p.Status == (short)status)
                 .OrderBy(p => p.Sort)
                 .ThenByDescending(p => p.AutoID)
                 .FirstOrDefaultAsync();
        }

        public async Task<ContentInfo> GetSingleCont(string nodeIdentifier, ContStatus status = ContStatus.Normal)
        {
            var node = GetCacheNode(nodeIdentifier);
            if (node != null)
            {
                return await dbo.Content.AsNoTracking().Where(p => p.NodeID == node.AutoID && p.Status == (short)status)
                .OrderBy(p => p.Sort)
                .OrderByDescending(p => p.AutoID)
                .FirstOrDefaultAsync();
            }

            return null;
        }

        #endregion

        #region 导入导出

        public async Task Import(string txtXml, string lang, string creator)
        {
            //读取并导入数据
            XmlDocument dom = new XmlDocument();
            dom.LoadXml(txtXml);

            var rootNode = dom.SelectSingleNode("NodeTemplate");
            int numSort = 1;
            foreach (XmlNode xmlNode in rootNode.ChildNodes)
            {
                await ImportSingle(xmlNode, null, numSort, lang, creator);
                numSort++;
            }
        }

        public async Task<string> ExportReturnFilePath()
        {
            var lstNode = GetCacheChildNodes(0); //读取所有根目录
            if (lstNode != null && lstNode.Count() > 0)
            {
                var builder = new StringBuilder("<?xml version=\"1.0\" encoding=\"utf-8\" ?><NodeTemplate>");
                foreach (NodeInfo item in lstNode)
                    builder.Append(NodeToXml(item));
                builder.Append("</NodeTemplate>");

                string virtualFileName = FileUtils.Combine(SinGooBase.ExportFolder, StringUtils.GetNewFileName() + ".xml");
                await FileUtils.WriteFileContentAsync(SinGooBase.GetMapPath(virtualFileName), builder.ToString(), false, Encoding.UTF8);
                return virtualFileName;
            }

            return string.Empty;
        }

        public string NodeToXml(NodeInfo node)
        {
            var builder = new StringBuilder();
            var model = cacheStore.CacheContModels.Where(p => p.AutoID.Equals(node.ModelID)).FirstOrDefault();
            builder.Append(new Domain.NodeImportModel()
            {
                NodeName = node.NodeName,
                NodeCode = node.NodeIdentifier,
                ModelName = model.ModelName,
                IsMenu = node.IsShowOnMenu ? "True" : "False",
                IndexTmpl = node.NodeSetting?.TemplateOfNodeIndex ?? string.Empty,
                ListTmpl = node.NodeSetting?.TemplateOfNodeList ?? string.Empty,
                DetailTmpl = node.NodeSetting?.TemplateOfNodeContent ?? string.Empty
            }.ToString());

            if (node.ChildCount > 0)
            {
                foreach (var item in cacheStore.CacheNodes.Where(p => p.ParentID == node.AutoID))
                    builder.Append(NodeToXml(item));
            }

            builder.Append("</Node>");
            return builder.ToString();
        }

        #endregion

        #region helper

        /// <summary>
        /// 主栏目数量
        /// </summary>
        /// <returns></returns>
        public async Task<int> GetMainNodeCount() =>
           await GetCountAsync(p => p.IsShowOnMenu);

        /// <summary>
        /// 栏目是否有内容
        /// </summary>
        /// <param name="nodeID"></param>
        /// <returns></returns>
        public async Task<bool> HasContent(int nodeID) =>
            await dbo.Content.AsNoTracking().Where(p => p.NodeID == nodeID).AnyAsync();

        /// <summary>
        /// 更新上级的ChildList
        /// </summary>
        /// <param name="nodeSource">当前栏目信息</param>
        /// <param name="isRemove">是从上级移出还是移入</param>
        /// <returns></returns>
        private async Task UpdateParentsChildList(NodeInfo nodeSource, bool isRemove = false)
        {
            var parentNodes = await NoTrackQuery().Where(p => nodeSource.ParentPath.ToIntArray(',').Contains(p.AutoID)).ToListAsync();
            parentNodes.ForEach(async item =>
            {
                string childList = isRemove
                ? string.Join(",", item.ChildList.Split(',').Except(nodeSource.ChildList.Split(',')))
                : item.ChildList + "," + nodeSource.ChildList;

                await UpdateAsync($"ChildList='{childList}'", $"{key}=" + item.AutoID);
            });
        }

        /// <summary>
        /// 更新下级的ParentPath
        /// </summary>
        /// <param name="nodeParent"></param>
        /// <returns></returns>
        private async Task UpdateChildsParentPath(NodeInfo nodeParent)
        {
            //所有直系下级
            var childNodes = await NoTrackQuery().Where(p => p.ParentID == nodeParent.AutoID).ToListAsync();
            childNodes.ForEach(async item =>
            {
                item.ParentPath = nodeParent.ParentPath + "," + nodeParent.AutoID.ToString();
                item.Depth = item.ParentPath.Split(',').Length;
                await UpdateAsync(item);

                //递归更新下级
                if (item.ChildCount > 0)
                    await UpdateChildsParentPath(item);
            });
        }

        /// <summary>
        /// 判断是否存在，栏目标识不能重复
        /// </summary>
        /// <param name="node"></param>
        /// <param name="isEdit"></param>
        /// <returns></returns>
        private async Task<bool> Exists(NodeInfo node, bool isEdit = false) =>
            isEdit
            ? await NoTrackQuery().Where(p => p.NodeIdentifier == node.NodeIdentifier && p.AutoID != node.AutoID).AnyAsync()
            : await NoTrackQuery().Where(p => p.NodeIdentifier == node.NodeIdentifier).AnyAsync();

        /// <summary>
        /// 导入栏目
        /// </summary>
        /// <param name="xmlNode">栏目</param>
        /// <param name="nodeParent">上级栏目</param>
        /// <param name="sort"></param>
        /// <param name="lang"></param>
        /// <param name="creator"></param>
        /// <returns></returns>
        private async Task ImportSingle(XmlNode xmlNode, NodeInfo nodeParent, int sort = 999, string lang = "zh-cn", string creator = "admin")
        {
            //模型
            var contModel = cacheStore.CacheContModels
                .Where(p => p.ModelName.Equals(xmlNode.Attributes["ModelName"].Value.Trim()))
                .FirstOrDefault();

            //栏目名称是必须的
            if (xmlNode.Attributes["NodeName"] != null && contModel != null)
            {
                var entity = new NodeInfo
                {
                    NodeName = xmlNode.Attributes["NodeName"].Value.Trim(), //栏目名称
                    NodeIdentifier = xmlNode.Attributes["NodeCode"] != null
                                    ? xmlNode.Attributes["NodeCode"].Value.Trim()
                                    : StringUtils.GetGUID(), //栏目标识 唯一的
                    ParentID = nodeParent?.AutoID ?? 0, //上级栏目ID
                    ModelID = contModel.AutoID, //模型ID
                    SeoKey = xmlNode.Attributes["NodeName"].Value.Trim(),
                    SeoDescription = string.Empty,
                    IsShowOnMenu = xmlNode.Attributes["IsMenu"] != null
                                   ? xmlNode.Attributes["IsMenu"].Value == "True"
                                   : false, //是否菜单栏目
                    Sort = sort,
                    Lang = SinGooBase.CurrLang,
                    Creator = creator,
                    AutoTimeStamp = DateTime.Now
                };

                if (await Exists(entity))
                    return;

                //选项
                entity.Setting = new Domain.NodeSetting()
                {
                    TemplateOfNodeIndex = xmlNode.Attributes["IndexTmpl"] != null
                                        ? xmlNode.Attributes["IndexTmpl"].Value.Trim()
                                        : nodeParent?.NodeSetting.TemplateOfNodeIndex ?? string.Empty,
                    TemplateOfNodeList = xmlNode.Attributes["ListTmpl"] != null
                                        ? xmlNode.Attributes["ListTmpl"].Value.Trim()
                                        : nodeParent?.NodeSetting.TemplateOfNodeList ?? string.Empty,
                    TemplateOfNodeContent = xmlNode.Attributes["DetailTmpl"] != null
                                            ? xmlNode.Attributes["DetailTmpl"].Value.Trim()
                                            : nodeParent?.NodeSetting.TemplateOfNodeContent ?? string.Empty
                }.ToJson();

                //添加栏目到数据库
                var result = await AddNode(entity, nodeParent);
                if (result.OpResult.ret == ResultType.Success)
                {
                    entity.AutoID = result.NodeId;

                    if (xmlNode.HasChildNodes)
                    {
                        int numSort = 1;
                        foreach (XmlNode item in xmlNode.ChildNodes)
                        {
                            await ImportSingle(item, entity, numSort, lang, creator); //递归所有子栏目
                            numSort++;
                        }
                    }
                }
            }
        }

        #endregion
    }
}