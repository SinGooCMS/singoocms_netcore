//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:48
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Data;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class ContentRepository : RespositoryBase<ContentInfo>, IContentRepository
    {
        private readonly INodeRepository nodeRepository;
        private readonly IContModelRepository contModelRepository;
        private readonly IContFieldRepository contFieldRepository;
        private readonly ICacheStore cacheStore;

        public ContentRepository(
            INodeRepository _nodeRepository,
            IContModelRepository _contModelRepository,
            IContFieldRepository _contFieldRepository,
            ICacheStore _cacheStore
            )
        {
            this.nodeRepository = _nodeRepository;
            this.contModelRepository = _contModelRepository;
            this.contFieldRepository = _contFieldRepository;
            this.cacheStore = _cacheStore;
        }

        #region 增/改/删

        public async Task<int> AddContent(ContentInfo content, NodeInfo node, ContModelInfo model, Dictionary<string, ContFieldInfo> dicField = null)
        {
            //栏目信息
            content.NodeID = node.AutoID;
            content.NodeName = node.NodeName;
            content.NodeExts = node.AutoID.ToString();
            //模型信息
            content.ModelID = model.AutoID;
            content.TableName = model.TableName;
            //若没有指定模板文件，继承自栏目的模板详情模板
            if (content.TemplateFile.IsNullOrEmpty())
                content.TemplateFile = node.NodeSetting.TemplateOfNodeContent;
            content.AutoTimeStamp = DateTime.Now;
            content = SetValue(content, dicField); //设置主表信息

            //添加主表信息
            int contAddID = await AddAsync(content);
            if (contAddID > 0)
            {
                #region 添加副表信息

                var customFields = await contFieldRepository.GetNonSystemFields(model.AutoID);
                customFields.ForEach(item =>
                {
                    item.Value = item.FieldName == "ContID"
                    ? contAddID.ToString()
                    : (dicField != null ? dicField.GetSafeValue(item.FieldName).Value ?? string.Empty : string.Empty);
                });

                await AddOrUpdateCustomTBInfo(model.TableName, customFields);
                #endregion
            }

            return contAddID;
        }

        public async Task<int> AddSimpleCont(NodeInfo node, ContModelInfo model, string creator)
        {
            return await AddContent(new ContentInfo()
            {
                NodeID = node.AutoID,
                NodeName = node.NodeName,
                NodeExts = node.AutoID.ToString(),
                ModelID = model.AutoID,
                TableName = model.TableName,
                Title = "栏目(" + node.NodeName + ")的默认标题",
                Summary = "栏目(" + node.NodeName + ")的默认摘要",
                Content = "栏目(" + node.NodeName + ")的默认内容",
                Inputer = creator,
                Status = (int)ContStatus.Normal,
                AutoTimeStamp = System.DateTime.Now
            }, node, model);
        }

        public async Task<bool> UpdateContent(ContentInfo content, Dictionary<string, ContFieldInfo> dicField)
        {
            content = SetValue(content, dicField);
            if (await UpdateAsync(content))
            {
                #region 更新副表

                var customFields = await contFieldRepository.GetNonSystemFields(content.ModelID);
                customFields.ForEach(item =>
                {
                    item.Value = item.FieldName == "ContID"
                    ? content.AutoID.ToString()
                    : dicField.GetSafeValue(item.FieldName).Value ?? string.Empty;
                });

                await AddOrUpdateCustomTBInfo(content.TableName, customFields, content.AutoID);
                #endregion                
            }

            return true;
        }

        public async Task UpdateHits(int contID) =>
           await UpdateAsync("Hit=Hit+1", $"AutoID={contID}");

        public async Task<bool> UpdateStatus(string ids, ContStatus status = ContStatus.Normal) =>
           await UpdateAsync($"Status={(int)status}", $"AutoID in ({ids})");

        public async Task<bool> MoveContent(string ids, NodeInfo targetNode)
        {
            if (await DbAccess.ExecSQLAsync($"update {tableName} set NodeID=@NodeID,NodeName=@NodeName where AutoID in ({ids})", new System.Data.Common.DbParameter[] {
                DbAccess.MakeParam("@NodeID",targetNode.AutoID),
                DbAccess.MakeParam("@NodeName",targetNode.NodeName)
            }))
            {
                cache.Del(CacheKey.CKEY_CMSNODE);
                return true;
            }

            return false;
        }

        public async Task<bool> DelToRecycle(string ids) =>
           await UpdateStatus(ids, ContStatus.Recycle);

        public async Task DelFromRecycle(string ids)
        {
            foreach (var id in ids.ToIntArray())
            {
                await DelFromRecycle(id);
            }
        }

        public async Task ClearRecycle()
        {
            var lst = NoTrackQuery().Where(p => p.Status == (int)ContStatus.Recycle);
            foreach (var item in lst)
            {
                await DelFromRecycle(item.AutoID);
            }
        }

        #endregion

        #region 获取内容列表

        public async Task<PagerModel<IEnumerable<ContentBaseInfo>>> GetContPagerListAsync(string condition, string sort, int pageIndex, int pageSize)
        {
            return new PagerModel<IEnumerable<ContentBaseInfo>>()
            {
                PagerData = await DbAccess.GetPagerListAsync<ContentBaseInfo>(condition, sort, pageIndex, pageSize, ContentBaseInfo.ShortFields),
                PageIndex = pageIndex,
                PageSize = pageSize,
                TotalRecord = await DbAccess.GetCountAsync(tableName, condition)
            };
        }

        public async Task<IEnumerable<ContentBaseInfo>> GetContentList(int topNum, Expression<Func<ContentInfo, bool>> condition = null)
        {
            var lst = new List<ContentInfo>();
            if (condition != null)
                lst = await NoTrackQuery().Where(condition).OrderBy(p => p.Sort).ThenByDescending(p => p.AutoID).Take(topNum).ToListAsync();
            else
                lst = await NoTrackQuery().OrderBy(p => p.Sort).ThenByDescending(p => p.AutoID).Take(topNum).ToListAsync();

            if (lst != null && lst.Count() > 0)
            {
                foreach (var item in lst)
                {
                    item.CustomTable = GetCustomTBInfo(item.AutoID, item.TableName);
                    item.ContentUrl = GetContentUrl(item.AutoID);
                }
            }

            return lst;
        }

        public async Task<IEnumerable<ContentBaseInfo>> GetContentList(NodeInfo node, int pageIndex, int pageSize, bool containAllChildNode = false) =>
            await GetContentList(node, string.Empty, string.Empty, pageIndex, pageSize, containAllChildNode);

        public async Task<IEnumerable<ContentBaseInfo>> GetContentList(NodeInfo node, string condition, string sort, int pageIndex, int pageSize, bool containAllChildNode = false)
        {
            var builder = new StringBuilder();
            //必须是已审核的
            builder.Append($" Status={(int)ContStatus.Normal} ");
            if (node != null)
            {
                if (containAllChildNode)
                    builder.Append($" and NodeID in ({node.ChildList}) ");
                else
                    builder.Append($" and NodeID={node.AutoID} ");
            }

            //附加条件
            if (!condition.IsNullOrEmpty())
                builder.Append(" and " + condition);

            //默认按排序号顺序、时间倒序排列
            if (sort == "")
                sort = "Sort asc,AutoID desc";

            string fields = ContentBaseInfo.ShortFields + ",(select COUNT(*) from cms_Comment where ContID=SinGooPagerAlias.AutoID group by ContID) as CommentCount";
            var lst = await DbAccess.GetPagerListAsync<ContentBaseInfo>(builder.ToString(), sort, pageIndex, pageSize, fields);
            if (lst != null && lst.Count() > 0)
            {
                foreach (var item in lst)
                {
                    item.CustomTable = GetCustomTBInfo(item.AutoID, item.TableName);
                    item.ContentUrl = GetContentUrl(item.AutoID);
                }
            }

            return lst;
        }

        #endregion

        #region 读取内容信息

        public int ArticleCount => NoTrackQuery().Count(p => p.Status == (int)ContStatus.Normal);

        public async Task<ContentInfo> GetContentFull(int contID)
        {
            var cont = await FindAsync(contID);
            if (cont != null)
            {
                cont.CustomTable = GetCustomTBInfo(cont.AutoID, cont.TableName);
                cont.ContentUrl = GetContentUrl(cont.AutoID);
            }

            return cont;
        }

        public async Task<NodeInfo> GetSelfNode(int contID)
        {
            var nodeID = await DbAccess.GetValueAsync<int>($"select NodeID from cms_Content where AutoID={contID}");
            return cacheStore.CacheNodes.Where(p => p.AutoID.Equals(nodeID)).FirstOrDefault();
        }

        #endregion

        #region 上一篇下一篇

        public async Task<ContentBaseInfo> GetPrevCont(int contId, int nodeId = 0)
        {
            var builder = new StringBuilder();
            if (string.Compare(ConfigUtils.ProviderName, DbType.SqlServer.ToString(), true) == 0)
            {
                //仅sqlserver适用
                builder.Append($"select cast(RowNum as int) from (select AutoID,RowNum=(ROW_NUMBER() over(order by Sort asc,AutoID desc)) from cms_Content where Status={(int)ContStatus.Normal} ");
                if (nodeId > 0) builder.Append($"and NodeID={nodeId}");
                builder.Append($") as a where AutoID={contId}");
                var contRowNum = DbAccess.GetValue<int>(builder.ToString());

                builder.Clear();

                builder.Append($"select top 1 AutoID from (select AutoID,RowNum=(ROW_NUMBER() over(order by Sort asc,AutoID desc)) from cms_Content where Status={(int)ContStatus.Normal} ");
                if (nodeId > 0) builder.Append($"and NodeID={nodeId}");
                builder.Append($") as a where RowNum={(contRowNum - 1)}");
                int prevId = DbAccess.GetValue<int>(builder.ToString());

                var cont = await DbAccess.FindAsync<ContentBaseInfo>(prevId);
                if (cont != null)
                    cont.ContentUrl = GetContentUrl(prevId);

                return cont;

            }
            else
            {
                int prevId = DbAccess.GetValue<int>($"select MAX(AutoID) from cms_Content where AutoID<{contId}");
                return await dbSet.FindAsync(prevId);
            }
        }

        public async Task<ContentBaseInfo> GetNextCont(int contId, int nodeId = 0)
        {
            var builder = new StringBuilder();
            if (ConfigUtils.ProviderName.ToLower() == DbType.SqlServer.ToString().ToLower())
            {
                //仅sqlserver适用
                builder.Append($"select cast(RowNum as int) from (select AutoID,RowNum=(ROW_NUMBER() over(order by Sort asc,AutoID desc)) from cms_Content where Status={(int)ContStatus.Normal} ");
                if (nodeId > 0) builder.Append($"and NodeID={nodeId}");
                builder.Append($") as a where AutoID={contId}");
                var contRowNum = DbAccess.GetValue<int>(builder.ToString());

                builder.Clear();

                builder.Append($"select top 1 AutoID from (select AutoID,RowNum=(ROW_NUMBER() over(order by Sort asc,AutoID desc)) from cms_Content where Status={(int)ContStatus.Normal} ");
                if (nodeId > 0) builder.Append($"and NodeID={nodeId}");
                builder.Append($") as a where RowNum={(contRowNum + 1)}");
                int nextId = DbAccess.GetValue<int>(builder.ToString());

                var cont = await DbAccess.FindAsync<ContentBaseInfo>(nextId);
                if (cont != null)
                    cont.ContentUrl = GetContentUrl(nextId);

                return cont;
            }
            else
            {
                int nextId = DbAccess.GetValue<int>($"select min(AutoID) from cms_Content where AutoID>{contId}");
                return await dbSet.FindAsync(nextId);
            }
        }

        #endregion

        #region 复制内容

        public async Task<int> CopyToNewCont(ContentInfo cont, string Inputer)
        {
            var contCopy = cont.DeepClone<ContentInfo>();
            contCopy.AutoID = 0; //这里一定要清0，不然efcore会报错
            contCopy.Title = "复制:" + cont.Title;
            contCopy.Sort = MaxSort.Value + 1;
            contCopy.Status = (int)ContStatus.DraftBox;
            contCopy.Inputer = Inputer;
            contCopy.AutoTimeStamp = System.DateTime.Now;

            int newContId = await AddAsync(contCopy);
            if (newContId > 0)
            {
                #region 更新副表

                var dicField = await contFieldRepository.GetFieldsWithValue(contCopy.ModelID, contCopy.AutoID);
                var customFields = await contFieldRepository.GetNonSystemFields(contCopy.ModelID);
                customFields.ForEach(item =>
                {
                    item.Value = item.FieldName == "ContID"
                    ? newContId.ToString()
                    : dicField.Where(p => p.FieldName.Equals(item.FieldName)).FirstOrDefault()?.Value ?? string.Empty;
                });

                await AddOrUpdateCustomTBInfo(contCopy.TableName, customFields, newContId);

                #endregion

                return newContId;
            }

            return 0;
        }

        #endregion

        /// <summary>
        /// 读取不重复的栏目信息
        /// </summary>
        /// <param name="contIds"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        public async Task<IEnumerable<NodeInfo>> GetDistinctNodes(string contIds, int? status = null) =>
            status == null
            ? await NoTrackQuery()
                    .Where(p => contIds.ToIntArray(',').Contains(p.AutoID))
                    .GroupBy(p => new { p.NodeID })
                    .Select(p => new NodeInfo() { AutoID = p.Key.NodeID })
                    .ToListAsync()
            : await NoTrackQuery()
                    .Where(p => contIds.ToIntArray(',').Contains(p.AutoID) && p.Status == (short)status.Value)
                    .GroupBy(p => new { p.NodeID })
                    .Select(p => new NodeInfo() { AutoID = p.Key.NodeID })
                    .ToListAsync();

        #region helper

        private async Task<bool> DelFromRecycle(int contId)
        {
            var cont = await FindAsync(contId);
            if (cont != null && cont.Status == (short)ContStatus.Recycle)
            {
                var lst = new List<string>();
                lst.Add($"DELETE FROM cms_Content WHERE AutoID={contId};"); //删除主表
                if (!cont.TableName.IsNullOrEmpty())
                    lst.Add($"DELETE FROM {cont.TableName} WHERE ContID={contId};"); //删除副表
                if (!cont.Attachment.IsNullOrEmpty())
                    lst.Add($"DELETE FROM cms_Attachment WHERE AutoID in ({cont.Attachment});"); //删除附件

                await DbAccess.ExecTransAsync(lst);
                return true;
            }

            return false;
        }

        /// <summary>
        /// 添加或者更新副表
        /// </summary>
        /// <param name="tableName"></param>
        /// <param name="fieldsWithVal"></param>
        /// <param name="contId"></param>
        /// <returns></returns>
        private async Task<bool> AddOrUpdateCustomTBInfo(string tableName, IEnumerable<ContFieldInfo> fieldsWithVal, int contId = 0)
        {
            if (!await IsInCustomTB(contId, tableName))
            {
                string commandText = Utils.GenerateSqlOfInsert(tableName, fieldsWithVal);
                var parameters = Utils.PrepareSqlParameters(fieldsWithVal);
                return await DbAccess.ExecSQLAsync(commandText, parameters);
            }
            else
            {
                string commandText = Utils.GenerateSqlOfUpdate(tableName, fieldsWithVal, "ContID", contId);
                var parameters = Utils.PrepareSqlParameters(fieldsWithVal);
                return await DbAccess.ExecSQLAsync(commandText, parameters);
            }

        }

        /// <summary>
        /// 是否在副表中存在文章记录
        /// </summary>
        /// <param name="contID"></param> 
        /// <param name="tableName"></param>
        /// <returns></returns>
        private async Task<bool> IsInCustomTB(int contID, string tableName) =>
           await DbAccess.GetValueAsync<int>($"select count(*) from {tableName} where ContID={contID}") > 0;

        /// <summary>
        /// 获取副表信息
        /// </summary>
        /// <param name="contID">内容ID</param>
        /// <param name="tableName">副表表名</param>
        /// <returns></returns>
        private DataTable GetCustomTBInfo(int contID, string tableName) =>
            DbAccess.GetDataTable($"select * from {tableName} where ContID={contID}");

        /// <summary>
        /// 浏览方式
        /// </summary>
        /// <param name="contId"></param>
        /// <returns></returns>
        private string GetContentUrl(int contId)
        {
            return EnumUtils.StringToEnum<BrowseType>(cacheStore.CacheBaseConfig.BrowseType) == BrowseType.MvcDefault
                ? "/article/detail/" + contId.ToString()
                : "/article/detail/" + contId.ToString() + ".html"; //伪静态
        }

        /// <summary>
        /// 给内容主表赋值
        /// </summary>
        /// <param name="content"></param>
        /// <param name="dicField"></param>
        /// <returns></returns>
        private ContentInfo SetValue(ContentInfo content, Dictionary<string, ContFieldInfo> dicField)
        {
            if (dicField == null)
                return content;

            var propers = typeof(ContentInfo).GetProperties();
            propers.ForEach(item =>
            {
                if (dicField.ContainsKey(item.Name))
                {
                    if (item.PropertyType == typeof(bool))
                        item.SetValue(content, dicField.GetSafeValue(item.Name).Value.ToBool());
                    else if (item.PropertyType == typeof(int) || item.PropertyType == typeof(long))
                        item.SetValue(content, dicField.GetSafeValue(item.Name).Value.ToInt());
                    else if (item.PropertyType == typeof(decimal) || item.PropertyType == typeof(double) || item.PropertyType == typeof(float))
                        item.SetValue(content, dicField.GetSafeValue(item.Name).Value.ToDecimal());
                    else if (item.PropertyType == typeof(DateTime) || item.PropertyType == typeof(DateTime?))
                        item.SetValue(content, dicField.GetSafeValue(item.Name).Value.ToDateTime());
                    else
                        item.SetValue(content, dicField.GetSafeValue(item.Name).Value);
                }
            });

            return content;
        }

        #endregion
    }
}