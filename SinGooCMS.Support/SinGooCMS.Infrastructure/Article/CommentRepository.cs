//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:47
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Ado;
using SinGooCMS.Domain;
using SinGooCMS.Utility.Extension;
using SinGooCMS.Utility;

namespace SinGooCMS.Infrastructure
{
    public class CommentRepository : RespositoryBase<CommentInfo>, ICommentRepository
    {
        public CommentRepository()
        {
            //
        }

        public async Task<Result> Send(string comment, int contId, UserInfo user)
        {
            if (await IsInfuseWater(user.AutoID))
                return OperateResult.Fail("CMS_SendCommentFrequently", "评论间隔时间过短");

            var commentInfo = new CommentInfo()
            {
                ContID = contId,
                ReplyID = 0,
                UserID = user.AutoID,
                UserName = user.UserName,
                Comment = comment,
                IPAddress = IPUtils.GetIP(),
                IPArea = IPUtils.GetIPAreaStr().Replace("[本机地址 CZ88.NET]", "本机地址").Replace("本机地址 CZ88.NET", "本机地址"),
                Lang = SinGooBase.CurrLang,
                IsAudit = true,
                AutoTimeStamp = DateTime.Now
            };

            return await AddAsync(commentInfo) > 0
                ? Result.success
                : Result.fail;
        }

        #region 读取评论

        public async Task<IEnumerable<CommentInfo>> GetComments(int contID, bool? isAudit = true)
        {
            return isAudit == null
                ? await NoTrackQuery().Where(p => p.ContID == contID).OrderByDescending(p => p.AutoID).ToListAsync()
                : await NoTrackQuery().Where(p => p.ContID == contID && p.IsAudit == isAudit).OrderByDescending(p => p.AutoID).ToListAsync();
        }

        public async Task<IEnumerable<CommentInfo>> GetUserComments(int userID, bool? isAudit = true)
        {
            return isAudit == null
                ? await NoTrackQuery().Where(p => p.UserID == userID).OrderByDescending(p => p.AutoID).ToListAsync()
                : await NoTrackQuery().Where(p => p.UserID == userID && p.IsAudit == isAudit).OrderByDescending(p => p.AutoID).ToListAsync();
        }

        public async Task<CommentInfo> GetLatestComment(int userID) =>
            await NoTrackQuery().Where(p => p.UserID == userID).OrderByDescending(p => p.AutoID).FirstOrDefaultAsync();

        public async Task<PagerModel<IEnumerable<CommentInfo>>> GetPagerListWithReCount(string condition, string sort, int pageIndex, int pageSize)
        {
            string filter = "*,(select COUNT(*) from cms_Comment AS B where B.ReplyID=SinGooPagerAlias.AutoID) as ReplyCount,(select count(*) from cms_CommentActiveLog where CommentID=SinGooPagerAlias.AutoID and IsZan=1) as ZanCount,(select count(*) from cms_CommentActiveLog where CommentID = SinGooPagerAlias.AutoID and IsZan = 0) as CaiCount ";
            return await GetPagerListAsync(condition, sort, pageIndex, pageSize, filter);
        }

        public async Task<PagerModel<IEnumerable<CommentInfo>>> GetPagerList(int contId, int pageIndex, int pageSize)
        {
            string condition = $"ContID={contId} AND IsAudit=1";
            return await GetPagerListWithReCount(condition, "AutoID desc", pageIndex, pageSize);
        }

        public async Task<CommentInfo> GetComment(int id)
        {
            var cmt = await FindAsync(id);
            if (cmt != null)
            {
                cmt.ZanCount = await dbo.CommentActiveLog.CountAsync(p => p.IsZan && p.CommentID == id); //点赞数
                cmt.CaiCount = await dbo.CommentActiveLog.CountAsync(p => !p.IsZan && p.CommentID == id); //点踩
            }

            return cmt;
        }

        #endregion

        #region 显示或隐藏评论

        public async Task ShowComment(string ids) =>
            await UpdateAsync("IsAudit=1", $"AutoID in ({ids})");

        public async Task HideComment(string ids) =>
            await UpdateAsync("IsAudit=0", $"AutoID in ({ids})");

        #endregion

        #region 删除评论

        public async Task<bool> DelMutli(string ids)
        {
            foreach (var item in ids.ToIntArray())
                await DelTopic(item);

            return true;
        }

        public async Task<bool> DelTopic(int subjectId)
        {
            if (await DeleteAsync(subjectId))
            {
                var lstSql = new List<string>();
                lstSql.Add($"delete from cms_CommentActiveLog where CommentID in (select AutoID from cms_Comment where ReplyID={subjectId});"); //删除评论回复的点赞
                lstSql.Add($"delete from cms_CommentActiveLog where CommentID={subjectId};"); //删除评论的点赞
                lstSql.Add($"delete from cms_Comment where AutoID in (select AutoID from cms_Comment where ReplyID={subjectId});"); //删除评论的所有回复
                lstSql.Add($"delete from cms_Comment where AutoID={subjectId};"); //删除评论主题

                await DbAccess.ExecTransAsync(lstSql);

                return true;
            }

            return false;
        }

        #endregion

        public async Task<bool> IsInfuseWater(int userId)
        {
            var cmt = await GetLatestComment(userId);
            if (cmt != null)
                return (System.DateTime.Now - cmt.AutoTimeStamp).GetValueOrDefault().TotalSeconds < 10;

            return false;
        }
    }
}