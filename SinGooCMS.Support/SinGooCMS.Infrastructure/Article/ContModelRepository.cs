//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:49
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Text;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Ado;
using SinGooCMS.Ado.Interface;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;

namespace SinGooCMS.Infrastructure
{
    public class ContModelRepository : RespositoryBase<ContModelInfo>, IContModelRepository
    {
        IDbMaintenance dbMaintenance = DbProvider.DbMaintenance;
        private readonly ICacheStore cacheStore;

        public ContModelRepository(ICacheStore _cacheStore)
        {
            this.cacheStore = _cacheStore;
        }

        #region 增/改/删

        public async Task<Result> AddModel(ContModelInfo model)
        {
            var existsResult = await Exists(model.ModelName, model.TableName);
            if (existsResult.ret != ResultType.Success)
                return existsResult;

            int modelId = await AddAsync(model);
            if (modelId > 0)
            {
                try
                {
                    //创建自定义表,同时生成主键自增字段
                    dbMaintenance.CreateTable(model.TableName, new List<DbColumnInfo>() {
                        new DbColumnInfo() { ColumnName = "AutoID",DataType="int", IsIdentity=true,IsPrimarykey=true },
                        new DbColumnInfo()
                        {
                            ColumnName = "ContID",
                            DataType = "int",
                            IsNullable = false,
                            DefaultValue = "0"
                        }
                    });

                    await Utils.AddDefaultField(modelId); //添加默认字段
                    cache.Del(CacheKey.CKEY_CMSCONTMODEL);
                    return Result.success;
                }
                catch (Exception ex)
                {
                    return OperateResult.Fail("创建数据表错误：" + ex.Message);
                }
            }

            return Result.fail;
        }

        public async Task<bool> UpdateModel(ContModelInfo model)
        {
            var result = await UpdateAsync(model);
            cache.Del(CacheKey.CKEY_CMSCONTMODEL);
            return result;
        }

        public async Task<Result> DeleteModel(ContModelInfo model)
        {
            var refResult = await IsRefing(model.AutoID);
            if (refResult.ret != ResultType.Success)
                return refResult;

            if (await DeleteAsync(model))
            {
                //删除字段
                await DbAccess.ExecSQLAsync($"delete from cms_ContField where ModelID={model.AutoID}");
                //删除表
                dbMaintenance.DropTable(model.TableName);

                cache.Del(CacheKey.CKEY_CMSCONTMODEL);
                return Result.success;
            }

            return Result.fail;
        }

        #endregion        

        #region 缓存

        public ContModelInfo GetCacheModel(int modelID) =>
            cacheStore.CacheContModels.Where(p => p.AutoID == modelID).FirstOrDefault();

        public ContModelInfo GetCacheModel(string modelName) =>
            cacheStore.CacheContModels.Where(p => p.ModelName == modelName).FirstOrDefault();

        #endregion

        public async Task<ContModelInfo> GetModel(int modelID) =>
            await NoTrackQuery().Where(p => p.AutoID == modelID).FirstOrDefaultAsync();

        public async Task<ContModelInfo> GetModel(string modelName) =>
            await NoTrackQuery().Where(p => p.ModelName == modelName).FirstOrDefaultAsync();

        public async Task<IEnumerable<ContModelInfo>> GetModels(bool? isUsing = null) =>
            isUsing != null
            ? await NoTrackQuery().Where(p => p.IsUsing == isUsing).ToListAsync()
            : await NoTrackQuery().ToListAsync();

        #region helper

        /// <summary>
        /// 模型名称和副表表名是唯一的
        /// </summary>
        /// <param name="modelName"></param>
        /// <param name="tableName"></param>
        /// <returns></returns>
        private async Task<Result> Exists(string modelName, string tableName)
        {
            if (await NoTrackQuery().Where(p => p.ModelName == modelName).AnyAsync())
                return OperateResult.Fail("Model_ModelNameExists", "模型名称已存在");
            else if (await NoTrackQuery().Where(p => p.TableName == tableName).AnyAsync())
                return OperateResult.Fail("Model_DataTableNameExists", "数据表名已存在");
            else if (dbMaintenance.ExistsTable(tableName))
                OperateResult.Fail("Model_TableExists", "数据表已存在");

            return Result.success; ;
        }

        /// <summary>
        /// 判断模型是否正在被引用
        /// </summary>
        /// <param name="modelId"></param>
        /// <returns></returns>
        private async Task<Result> IsRefing(int modelId)
        {
            if (await dbo.Node.AsNoTracking().Where(p => p.ModelID == modelId).AnyAsync())
                return OperateResult.Fail("Model_RefingByNode", "模型被栏目引用");
            else if (await dbo.Content.AsNoTracking().Where(p => p.ModelID == modelId).AnyAsync())
                return OperateResult.Fail("Model_RefingByContent", "模型被内容引用");

            return Result.success;
        }

        #endregion
    }
}