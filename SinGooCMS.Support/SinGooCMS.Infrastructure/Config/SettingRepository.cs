//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:58
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class SettingRepository : RespositoryBase<SettingInfo>, ISettingRepository
    {
        public SettingRepository()
        {
            //
        }

        #region 增/改/删

        public async Task<Result> AddSettingAsync(SettingInfo setting)
        {
            if (await ExistsAsync(p => p.KeyName == setting.KeyName))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            if (await AddAsync(setting) > 0)
            {
                cache.Del(CacheKey.CKEY_BASECONFIG);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<Result> UpdateSettingAsync(SettingInfo setting)
        {
            if (await ExistsAsync(p => p.KeyName == setting.KeyName && p.AutoID != setting.AutoID))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            if (await UpdateAsync(setting))
            {
                cache.Del(CacheKey.CKEY_BASECONFIG);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<bool> UpdateSettingsAsync(IEnumerable<SettingInfo> settings)
        {
            var result = await UpdateRangeAsync(settings);
            cache.Del(CacheKey.CKEY_BASECONFIG);
            return result;
        }

        public async Task<bool> DeleteSettingAsync(SettingInfo setting)
        {
            var result = await DeleteAsync(setting);
            cache.Del(CacheKey.CKEY_BASECONFIG);
            return result;
        }

        #endregion

        public async Task<IEnumerable<SettingInfo>> GetSettingByCateID(int settingCateID) =>
          await NoTrackQuery().Where(p => p.CateID == settingCateID).OrderBy(p => p.Sort).ToListAsync();

        public async Task<SettingInfo> GetSettingByName(string keyName) =>
           await NoTrackQuery().Where(p => p.KeyName == keyName).FirstOrDefaultAsync();

        public async Task<Dictionary<string, SettingInfo>> GetSettingDictionary()
        {
            var allSettings = await GetAllAsync();
            var dictionary = new Dictionary<string, SettingInfo>();
            allSettings.ForEach(item =>
            {
                if (!dictionary.ContainsKey(item.KeyName))
                {
                    dictionary.Add(item.KeyName, item);
                }
            });

            return dictionary;
        }
    }
}