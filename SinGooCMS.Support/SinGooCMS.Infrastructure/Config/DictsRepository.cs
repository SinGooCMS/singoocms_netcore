//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:55
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class DictsRepository : RespositoryBase<DictsInfo>, IDictsRepository
    {
        private readonly ICacheStore cacheStore;
        public DictsRepository(ICacheStore _cacheStore)
        {
            this.cacheStore = _cacheStore;
        }

        #region 增/改/删

        public async Task<Result> AddDict(DictsInfo entity)
        {
            if (await ExistsName(entity.DictName))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            if (await AddAsync(entity) > 0)
            {
                cache.Del(CacheKey.CKEY_DICTS);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<Result> UpdateDict(DictsInfo entity)
        {
            if (await ExistsName(entity.DictName, entity.AutoID))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            if (await UpdateAsync(entity))
            {
                cache.Del(CacheKey.CKEY_DICTS);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<Result> DelDict(DictsInfo entity)
        {
            if (await ExistsItem(entity.AutoID))
                return OperateResult.Fail("OperationChildObjectExists", "操作对象已存在下级对象");

            if (await DeleteAsync(entity))
            {
                cache.Del(CacheKey.CKEY_DICTS);
                return Result.success;
            }

            return Result.fail;
        }

        #endregion        

        public async Task<DictsInfo> GetDictsByName(string dictsName) =>
            await NoTrackQuery().Where(p => p.DictName == dictsName).FirstOrDefaultAsync();

        public async Task<bool> ExistsName(string dictName, int Id = 0)
        {
            if (dictName.IsNullOrEmpty())
                return false;

            return Id > 0
            ? await NoTrackQuery().Where(p => p.DictName == dictName && p.AutoID != Id).AnyAsync()
            : await NoTrackQuery().Where(p => p.DictName == dictName).AnyAsync();
        }


        public async Task<bool> ExistsItem(int dictId) =>
            await dbo.DictItem.AsNoTracking().Where(p => p.DictID == dictId).AnyAsync();

        public async Task<IEnumerable<DictsInfo>> GetDicts() =>
            await DbAccess.GetListAsync<DictsInfo>("SELECT AutoID, DictName, DictDesc, Sort, IsUsing, AutoTimeStamp,(SELECT COUNT(*) FROM sys_Dicts WHERE ParentID=A.AutoID) as ChildCount FROM sys_Dicts AS A ORDER BY Sort ASC,AutoID DESC");

        #region 缓存

        public DictsInfo GetCacheDict(int dictId) =>
            cacheStore.CacheDicts.Where(p => p.AutoID.Equals(dictId)).FirstOrDefault();

        public DictsInfo GetCacheDict(string dictName) =>
            cacheStore.CacheDicts.Where(p => p.DictName.Equals(dictName)).FirstOrDefault();

        #endregion
    }
}