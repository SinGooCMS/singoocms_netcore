//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:55
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;

namespace SinGooCMS.Infrastructure
{
    public class DictItemRepository : RespositoryBase<DictItemInfo>, IDictItemRepository
    {
        private readonly IDictsRepository dictsRepository;
        private readonly ICacheStore cacheStore;

        public DictItemRepository(IDictsRepository _dictsRepository, ICacheStore _cacheStore)
        {
            this.dictsRepository = _dictsRepository;
            this.cacheStore = _cacheStore;
        }

        #region 增/改/删除

        public async Task<Result> AddDictItemAsync(DictItemInfo dictInfo)
        {
            if (await ExistsKey(dictInfo.KeyName))
                return OperateResult.Fail("OperationObjectExists","操作对象已存在");

            var itemId = await AddAsync(dictInfo);
            cache.Del(CacheKey.CKEY_DICTS);
            return itemId > 0 ? Result.success : Result.fail;
        }

        public async Task<Result> UpdateDictItemAsync(DictItemInfo dictInfo)
        {
            if (await ExistsKey(dictInfo.KeyName, dictInfo.AutoID))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            bool result = await UpdateAsync(dictInfo);
            cache.Del(CacheKey.CKEY_DICTS);
            return result ? Result.success : Result.fail;
        }

        public async Task<bool> DeleteDictItemAsync(DictItemInfo dictInfo)
        {
            bool result = await DeleteAsync(dictInfo);
            cache.Del(CacheKey.CKEY_DICTS);
            return result;
        }

        #endregion

        public async Task<bool> ExistsKey(string key, int Id = 0) =>
            Id > 0
            ? await NoTrackQuery().Where(p => p.KeyName == key && p.AutoID != Id).AnyAsync()
            : await NoTrackQuery().Where(p => p.KeyName == key).AnyAsync();

        #region 缓存

        public IEnumerable<DictItemInfo> GetCacheItems(int dictId) =>
           dictsRepository.GetCacheDict(dictId)?.Items;

        public IEnumerable<DictItemInfo> GetCacheItems(string dictName) =>
            dictsRepository.GetCacheDict(dictName)?.Items;

        public DictItemInfo GetCacheItem(int itemId)
        {
            foreach (var dict in cacheStore.CacheDicts)
            {
                var item = dict.Items.Where(p => p.AutoID.Equals(itemId)).FirstOrDefault();
                if (item != null)
                    return item;
            }

            return null;
        }

        public DictItemInfo GetCacheItem(string itemKey)
        {
            {
                foreach (var dict in cacheStore.CacheDicts)
                {
                    var item = dict.Items.Where(p => p.KeyName.Equals(itemKey)).FirstOrDefault();
                    if (item != null)
                        return item;
                }

                return null;
            }
        }

        #endregion        
    }
}