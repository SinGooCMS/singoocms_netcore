//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:58
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class SettingCategoryRepository : RespositoryBase<SettingCategoryInfo>, ISettingCategoryRepository
    {
        public SettingCategoryRepository()
        {
            //
        }

        #region 增/改/删

        public async Task<Result> AddSettingCate(SettingCategoryInfo entity)
        {
            if (await ExistsCateName(entity.CateName))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            if (await AddAsync(entity) > 0)
            {
                cache.Del(CacheKey.CKEY_BASECONFIG);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<Result> UpdateSettingCate(SettingCategoryInfo entity)
        {
            if (await ExistsCateName(entity.CateName,entity.AutoID))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            if (await UpdateAsync(entity))
            {
                cache.Del(CacheKey.CKEY_BASECONFIG);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<Result> DelSettingCate(SettingCategoryInfo entity)
        {
            if (await ExistsSetting(entity.AutoID))
                return OperateResult.Fail("OperationChildObjectExists", "操作对象已存在下级对象");

            return await DeleteAsync(entity)
                ? Result.success
                : Result.fail;
        }

        #endregion        

        public async Task<bool> ExistsSetting(int cateID) => 
            await dbo.Setting.Where(p => p.CateID.Equals(cateID)).AnyAsync();

        public async Task<bool> ExistsCateName(string cateName,int Id=0)
        {
            if (cateName.IsNullOrEmpty())
                return false;

            return Id > 0
            ? await NoTrackQuery().Where(p => p.CateName == cateName && p.AutoID != Id).AnyAsync()
            : await NoTrackQuery().Where(p => p.CateName == cateName).AnyAsync();
        }
           
    }
}