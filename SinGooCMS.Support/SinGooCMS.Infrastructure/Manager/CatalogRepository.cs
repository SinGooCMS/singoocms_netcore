//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:55
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;

namespace SinGooCMS.Infrastructure
{
    public class CatalogRepository : RespositoryBase<CatalogInfo>, ICatalogRepository
    {
        public CatalogRepository(IModuleRepository _moduleRepository)
        {
            //
        }

        #region 增/改/删除

        public async Task<Result> AddMenu(CatalogInfo entity)
        {
            if (await ExistsAsync(p => p.CatalogCode == entity.CatalogCode))
                return OperateResult.Fail("Menu_MenuCodeExists", "菜单代码已存在");

            if (await AddAsync(entity) > 0)
            {
                cache.Del(CacheKey.CKEY_ACCOUNTMENU);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<Result> UpdateMenu(CatalogInfo entity)
        {
            if (await ExistsAsync(p => p.CatalogCode == entity.CatalogCode && p.AutoID != entity.AutoID))
                return OperateResult.Fail("Menu_MenuCodeExists", "菜单代码已存在");

            if (await UpdateAsync(entity))
            {
                cache.Del(CacheKey.CKEY_ACCOUNTMENU);
                return Result.success;
            }

            return Result.fail;
        }

        public async Task<Result> DelMenu(CatalogInfo entity)
        {
            if (entity.IsSystem)
                return OperateResult.Fail("Menu_SysMenuDeleteDenied", "系统菜单不可删除");
            if (await ExistsChildModule(entity.AutoID))
                return OperateResult.Fail("Menu_RefByChildModule", "菜单正被子模块引用");
            else if (await DeleteAsync(entity))
            {
                cache.Del(CacheKey.CKEY_ACCOUNTMENU); //更新缓存
                return Result.success;
            }

            return Result.fail;
        }

        #endregion

        public async Task<bool> ExistsChildModule(int catalogID) =>
          await dbo.Module.AsNoTracking().Where(p => p.CatalogID == catalogID).AnyAsync();

        public async Task<bool> ExistsCode(string code) =>
           await NoTrackQuery().Where(p => p.CatalogCode == code).AnyAsync();

        public async Task<CatalogInfo> GetByCode(string code) =>
            await NoTrackQuery().Where(p => p.CatalogCode == code).FirstOrDefaultAsync();
    }
}