//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:58
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;
using System.Collections.Generic;

namespace SinGooCMS.Infrastructure
{
    public class RoleRepository : RespositoryBase<RoleInfo>, IRoleRepository
    {
        private readonly IModuleRepository moduleRepository;

        public RoleRepository(IModuleRepository _moduleRepository)
        {
            this.moduleRepository = _moduleRepository;
        }

        public async Task<int> AddRole(string roleName, string description = "")
        {
            return await AddAsync(new RoleInfo()
            {
                RoleName = roleName,
                Remark = description,
                IsSystem = false,
                IsManager = true,
                AutoTimeStamp = DateTime.Now
            });
        }

        public async Task SetPermissions(int roleId, int moduleId, string operations = "")
        {
            //operations的多个操作用逗号分隔
            if (operations.IsNullOrEmpty())
            {
                //授予模块的全部操作权限                
                var module = await moduleRepository.GetModule(moduleId);
                if (module.Operations != null && module.Operations.Count() > 0)
                {
                    foreach (var item in module.Operations)
                    {
                        dbo.Purview.Add(new PurviewInfo()
                        {
                            RoleID = roleId,
                            ModuleID = moduleId,
                            OperateCode = item.OperateCode,
                            AutoTimeStamp = DateTime.Now
                        });
                    }

                    await dbo.SaveChangesAsync();
                }
            }
            else
            {
                //授予模块的指定操作权限
                var module = await moduleRepository.GetModule(moduleId);
                if (module.Operations != null && module.Operations.Count() > 0)
                {
                    bool needSave = false;
                    var arrOperations = operations.Split(',');
                    foreach (var item in arrOperations)
                    {
                        var temp = module.Operations.Where(p => p.OperateCode.Equals(item)).FirstOrDefault();
                        if (temp != null)
                        {
                            needSave = true;
                            dbo.Purview.Add(new PurviewInfo()
                            {
                                RoleID = roleId,
                                ModuleID = moduleId,
                                OperateCode = item,
                                AutoTimeStamp = DateTime.Now
                            });
                        }
                    }

                    if (needSave)
                        await dbo.SaveChangesAsync();
                }
            }
        }

        public async Task<Result> DelRole(int roleId)
        {
            //判断是否存在帐号引用
            if (await dbo.Account.Where(p => ("," + p.Roles + ",").Contains("," + roleId.ToString() + ",")).AnyAsync())
                return OperateResult.Fail("Role_RefByAccount", "角色正在被账户引用！");

            //删除角色及角色的权限
            await DbAccess.ExecTransAsync(new List<string>()
            {
                $"delete from sys_Role where AutoID={roleId};",
                $"delete from sys_Purview where RoleID={roleId};"
            });

            cache.Del(CacheKey.CKEY_ACCOUNTMENU);
            return Result.success;
        }

        public async Task<bool> ExistsName(string roleName) =>
           await ExistsAsync(p => p.RoleName == roleName);

        public async Task<RoleInfo> GetByName(string roleName) =>
            await NoTrackQuery().Where(p => p.RoleName == roleName).FirstOrDefaultAsync();

        public async Task<RoleInfo> GetSuperAdminRole() =>
           await NoTrackQuery().Where(p => p.RoleName == "超级管理员").FirstOrDefaultAsync();
    }
}