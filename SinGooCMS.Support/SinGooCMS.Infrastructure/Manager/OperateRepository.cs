//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:57
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class OperateRepository : RespositoryBase<OperateInfo>, IOperateRepository
    {
        public OperateRepository()
        {
            //
        }

        #region 增/改/删除

        public async Task<Result> AddOperation(OperateInfo entity)
        {
            if (await ExistsCode(entity.ModuleID, entity.OperateCode))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            return await AddAsync(entity) > 0
                ? Result.success
                : Result.fail;
        }

        public async Task<Result> UpdateOperation(OperateInfo entity)
        {
            if (await ExistsCode(entity.ModuleID, entity.OperateCode, entity.AutoID))
                return OperateResult.Fail("OperationObjectExists", "操作对象已存在");

            return await UpdateAsync(entity)
                ? Result.success
                : Result.fail;
        }

        public async Task<bool> DelOperation(OperateInfo entity)
        {
            //删除操作符
            dbSet.Remove(entity);
            //删除相关的权限设置
            dbo.Purview.RemoveRange(dbo.Purview.Where(p => p.ModuleID == entity.ModuleID && p.OperateCode == entity.OperateCode));

            return await dbo.SaveChangesAsync() > 0;
        }

        #endregion

        public async Task<Result> AddDefaultOperate(int moduleID)
        {
            string[] baseOperaters = { OperationType.View, OperationType.Add, OperationType.Upload, OperationType.Delete };
            foreach (var item in baseOperaters)
            {
                if (await ExistsCode(moduleID, item))
                    return OperateResult.Fail("PLFM_OperaterCodeExists", "操作符已存在");
            }

            var builder = new StringBuilder();
            builder.Append(" insert into sys_Operate(ModuleID,OperateName,OperateCode,Remark,Sort,AutoTimeStamp)");
            builder.Append($" select {moduleID},'查看','{OperationType.View}','',999,'{DateTime.Now.ToFormatString()}' union all ");
            builder.Append($" select {moduleID},'增加','{OperationType.Add}','',999,'{DateTime.Now.ToFormatString()}' union all ");
            builder.Append($" select {moduleID},'修改','{OperationType.Modify}','',999,'{DateTime.Now.ToFormatString()}' union all ");
            builder.Append($" select {moduleID},'删除','{OperationType.Delete}','',999,'{DateTime.Now.ToFormatString()}' ");

            return await DbAccess.ExecSQLAsync(builder.ToString())
                ? Result.success
                : Result.fail;
        }

        public async Task<bool> ExistsCode(int moduleId, string OperationCode, int currOperationID = 0)
        {
            if (OperationCode.IsNullOrEmpty())
                return false;

            return currOperationID == 0
            ? await ExistsAsync(p => p.ModuleID == moduleId && p.OperateCode == OperationCode)
            : await ExistsAsync(p => p.ModuleID == moduleId && p.OperateCode == OperationCode && p.AutoID != currOperationID);
        }


        public DataTable GetOperateRelation() =>
            DbAccess.GetDataTable(@"SELECT A.*,B.OperateName,B.OperateCode 
                                    FROM sys_Module AS A LEFT JOIN sys_Operate AS B 
                                    ON A.AutoID = B.ModuleID ORDER BY A.CatalogID asc,A.Sort asc,B.Sort asc");
    }
}