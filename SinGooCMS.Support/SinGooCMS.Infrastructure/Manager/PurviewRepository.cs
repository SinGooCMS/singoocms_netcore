//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-04-03 15:48:57
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SinGooCMS.Domain.Models;
using SinGooCMS.Domain.Interface;
using SinGooCMS.Utility.Extension;

namespace SinGooCMS.Infrastructure
{
    public class PurviewRepository : RespositoryBase<PurviewInfo>, IPurviewRepository
    {
        private readonly IRoleRepository roleRepository;
        public PurviewRepository(IRoleRepository _roleRepository)
        {
            this.roleRepository = _roleRepository;
        }

        public async Task<bool> DelPurviews(int roleId) =>
          await DbAccess.ExecSQLAsync($"delete from {tableName} where RoleID={roleId}");

        public async Task<IEnumerable<PurviewInfo>> GetPurviews(int roleId) =>
            await NoTrackQuery().Where(p => p.RoleID == roleId).ToListAsync();

        /// <summary>
        /// 保存角色的权限
        /// </summary>
        /// <param name="role">角色</param>
        /// <param name="purviews">模块|操作码 如：1|Delete,1|Add,1|View,1|Modify,1|Import,1|Export</param>
        /// <returns></returns>
        public async Task<bool> SavePurviews(int roleId, string purviews)
        {
            var builder = new System.Text.StringBuilder();
            if (!string.IsNullOrEmpty(purviews) && purviews.IndexOf(',') != -1)
            {
                builder.Append("INSERT Into sys_Purview(RoleID,ModuleID,OperateCode) ");
                string[] arrPurview = purviews.Split(',');
                for (int i = 0; i < arrPurview.Length; i++)
                {
                    if (i == arrPurview.Length - 1)
                        builder.Append($" select {roleId},{arrPurview[i].Split('|')[0]},'{arrPurview[i].Split('|')[1]}' ");
                    else
                        builder.Append($" select {roleId},{arrPurview[i].Split('|')[0]},'{arrPurview[i].Split('|')[1]}' union all ");
                }

                //删除所有原有权限
                await DelPurviews(roleId);
                if (await DbAccess.ExecSQLAsync(builder.ToString()))
                {
                    cache.Del(CacheKey.CKEY_ACCOUNTMENU);
                    return true;
                }
            }

            return false;
        }

        public async Task<IEnumerable<PurviewInfo>> GetPurviews(AccountInfo account, int moduleID)
        {
            //超级管理员
            var superAdmin = await roleRepository.GetByName("超级管理员"); //必定有
            if (superAdmin == null)
                throw new Exception("缺少超级管理员信息");

            if (account.Roles.ToIntArray().Contains(superAdmin.AutoID))
            {
                //拥有超管权限，即拥有所有权限
                var purviews = new List<PurviewInfo>();
                var operateAll = dbo.Operate.ToList();
                operateAll.DeepClone().Where(p => p.ModuleID == moduleID).ForEach(item =>
                {
                    purviews.Add(new PurviewInfo()
                    {
                        AutoID = -1,
                        RoleID = superAdmin.AutoID,
                        ModuleID = item.ModuleID,
                        OperateCode = item.OperateCode,
                        AutoTimeStamp = System.DateTime.Now
                    });
                });

                return purviews;
            }
            else
            {
                return await NoTrackQuery()
                    .Where(p => p.ModuleID == moduleID && account.Roles.ToIntArray(',').Contains(p.RoleID))
                    .ToListAsync();
            }
        }
    }
}