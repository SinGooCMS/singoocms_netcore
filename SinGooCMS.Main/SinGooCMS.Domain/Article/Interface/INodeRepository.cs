//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-03-31 11:10:39
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;

namespace SinGooCMS.Domain.Interface
{
    public interface INodeRepository : IRepositoryBase<NodeInfo>
    {
        #region 增/改/删

        /// <summary>
        /// 增加栏目
        /// </summary>
        /// <param name="node">栏目信息</param>
        /// <param name="nodeParent">上级栏目</param>
        /// <returns></returns>
        Task<(Result OpResult, int NodeId)> AddNode(NodeInfo node, NodeInfo nodeParent = null);
        /// <summary>
        /// 更新栏目，只更新栏目的基本信息，栏目的层级关系在栏目移动中实现
        /// </summary>
        /// <param name="node"></param>
        /// <returns></returns>
        Task<Result> UpdateNode(NodeInfo node);
        /// <summary>
        /// 更新排序
        /// </summary>
        /// <param name="dictIDAndSort"></param>
        /// <returns></returns>
        Task<bool> UpdateNodeSort(Dictionary<int, int> dictIDAndSort);
        /// <summary>
        /// 删除栏目
        /// </summary>
        /// <param name="nodeID"></param>
        /// <returns></returns>
        Task<Result> DeleteNode(NodeInfo node);

        #endregion

        #region 读取缓存栏目列表
        /// <summary>
        /// 读取缓存栏目列表
        /// </summary>
        /// <param name="modelID">模型ID</param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetCacheNodesByModeID(int modelID);
        /// <summary>
        /// 读取缓存栏目列表
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetCachedNodes(string ids);

        /// <summary>
        /// 读取缓存所有层级子栏目
        /// </summary>
        /// <param name="parentID"></param>
        /// <param name="showOnMenu"></param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetCacheAllChildNodes(int parentID, bool? showOnMenu = null);
        /// <summary>
        /// 读取缓存所有层级子栏目
        /// </summary>
        /// <param name="parentIdentifier"></param>
        /// <param name="showOnMenu"></param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetCacheAllChildNodes(string parentIdentifier = null, bool? showOnMenu = null);

        /// <summary>
        /// 读取缓存直系子栏目
        /// </summary>
        /// <param name="parentID"></param>
        /// <param name="showOnMenu"></param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetCacheChildNodes(int parentID, bool? showOnMenu = null);
        /// <summary>
        /// 读取缓存直系子栏目
        /// </summary>
        /// <param name="parentIdentifier"></param>
        /// <param name="showOnMenu"></param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetCacheChildNodes(string parentIdentifier = null, bool? showOnMenu = null);        

        #endregion

        #region 获取缓存栏目信息

        /// <summary>
        /// 读取缓存栏目所有信息
        /// </summary>
        /// <param name="nodeID"></param>
        /// <returns></returns>
        NodeInfo GetCacheNodeFull(int nodeID);
        /// <summary>
        /// 读取缓存栏目所有信息
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        NodeInfo GetCacheNodeFull(string code);

        /// <summary>
        /// 读取缓存栏目
        /// </summary>
        /// <param name="nodeID"></param>
        /// <returns></returns>
        NodeInfo GetCacheNode(int nodeID);
        /// <summary>
        /// 读取缓存栏目
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        NodeInfo GetCacheNode(string code);

        /// <summary>
        /// 读取缓存栏目
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        NodeInfo GetCacheDefultNode(Func<NodeInfo, bool> condition = null);

        #endregion

        #region 栏目树

        /// <summary>
        /// 读取所有栏目的栏目树
        /// </summary>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetNodeTree();
        /// <summary>
        /// 栏目树
        /// </summary>
        /// <param name="nodes"></param>
        /// <param name="parentID"></param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetNodeTree(IEnumerable<NodeInfo> nodes, int parentID);
        /// <summary>
        /// 栏目导航
        /// </summary>
        /// <param name="parentPath"></param>
        /// <returns></returns>
        IEnumerable<NodeInfo> GetNodeNavigate(string parentPath);

        #endregion

        #region 栏目移动

        /// <summary>
        /// 栏目移动
        /// </summary>
        /// <param name="nodeSource"></param>
        /// <param name="nodeTarget"></param>
        /// <returns></returns>
        Task<Result> NodeMove(NodeInfo nodeSource, NodeInfo nodeTarget);

        #endregion

        #region 单页文章

        /// <summary>
        /// 读取栏目的单页文章内容
        /// </summary>
        /// <param name="nodeID"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        Task<ContentInfo> GetSingleCont(int nodeID, ContStatus status = ContStatus.Normal);

        /// <summary>
        /// 读取栏目的单页文章内容
        /// </summary>
        /// <param name="nodeIdentifier"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        Task<ContentInfo> GetSingleCont(string nodeIdentifier, ContStatus status = ContStatus.Normal);

        #endregion

        #region 导入导出

        /// <summary>
        /// 导入
        /// </summary>
        /// <param name="txtXml">xml文本</param>
        /// <returns></returns>
        Task Import(string txtXml, string lang, string creator);
        /// <summary>
        /// 导出并返回保存的文件路径
        /// </summary>
        /// <returns>导出保存的xml文件</returns>
        Task<string> ExportReturnFilePath();

        /// <summary>
        /// 栏目转xml
        /// </summary>
        /// <param name="node"></param>
        /// <returns></returns>
        string NodeToXml(NodeInfo node);

        #endregion

        #region helper

        /// <summary>
        /// 主栏目数量
        /// </summary>
        /// <returns></returns>
        Task<int> GetMainNodeCount();
        /// <summary>
        /// 是否有内容
        /// </summary>
        /// <param name="nodeID"></param>
        /// <returns></returns>
        Task<bool> HasContent(int nodeID);

        #endregion
    }
}