//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     Author:16826375@qq.com http://www.singoo.top
//     生成时间为:2020-03-31 11:10:39
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using SinGooCMS.Domain.Models;

namespace SinGooCMS.Domain.Interface
{
    public interface IContentRepository : IRepositoryBase<ContentInfo>
    {
        #region 增/改/删

        /// <summary>
        /// 增加文章
        /// </summary>
        /// <param name="content"></param>
        /// <param name="node"></param>
        /// <param name="model"></param>
        /// <param name="dicField"></param>
        /// <returns></returns>
        Task<int> AddContent(ContentInfo content, NodeInfo node, ContModelInfo model, Dictionary<string, ContFieldInfo> dicField = null);

        /// <summary>
        /// 添加简单的文章内容
        /// </summary>
        /// <param name="node">栏目信息</param>
        /// <param name="model">模型信息</param>
        /// <param name="creator">创建者</param>
        /// <returns></returns>
        Task<int> AddSimpleCont(NodeInfo node, ContModelInfo model, string creator);

        /// <summary>
        /// 更新文章
        /// </summary>
        /// <param name="content"></param>
        /// <param name="dicField"></param>
        /// <returns></returns>
        Task<bool> UpdateContent(ContentInfo content, Dictionary<string, ContFieldInfo> dicField);

        /// <summary>
        /// 阅读+1
        /// </summary>
        /// <param name="contID"></param>
        /// <returns></returns>
        Task UpdateHits(int contID);

        /// <summary>
        /// 更新状态
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        Task<bool> UpdateStatus(string ids, ContStatus status = ContStatus.Normal);

        /// <summary>
        /// 移动到栏目下
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="targetNode"></param>
        /// <returns></returns>
        Task<bool> MoveContent(string ids, NodeInfo targetNode);

        /// <summary>
        /// 删除（移动到回收站）
        /// </summary>
        /// <param name="ids"></param>
        /// <returns></returns>
        Task<bool> DelToRecycle(string ids);
        /// <summary>
        /// 从回收站删除
        /// </summary>
        /// <param name="ids"></param>
        Task DelFromRecycle(string ids);
        /// <summary>
        /// 清空回收站
        /// </summary>
        /// <returns></returns>
        Task ClearRecycle();

        #endregion

        #region 获取内容列表

        /// <summary>
        /// 读取前几条记录
        /// </summary>
        /// <param name="topNum"></param>
        /// <param name="condition"></param>
        /// <returns></returns>
        Task<IEnumerable<ContentBaseInfo>> GetContentList(int topNum, Expression<Func<ContentInfo, bool>> condition = null);

        /// <summary>
        /// 读取内容分页
        /// </summary>
        /// <param name="condition"></param>
        /// <param name="sort"></param>
        /// <param name="pageIndex"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        Task<PagerModel<IEnumerable<ContentBaseInfo>>> GetContPagerListAsync(string condition, string sort, int pageIndex, int pageSize);

        /// <summary>
        /// 读取指定栏目的所属文章内容列表
        /// </summary>
        /// <param name="node">栏目信息</param>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">分页记录数</param>
        /// <param name="containAllChildNode">是否包括所有子栏目</param>
        /// <returns></returns>
        Task<IEnumerable<ContentBaseInfo>> GetContentList(NodeInfo node, int pageIndex, int pageSize, bool containAllChildNode = false);

        /// <summary>
        /// 读取内容列表
        /// </summary>
        /// <param name="node">栏目信息</param>
        /// <param name="condition">附加条件</param>
        /// <param name="sort">排序</param>
        /// <param name="pageIndex">页号</param>
        /// <param name="pageSize">分页记录数</param>
        /// <param name="containAllChildNode">是否包括所有子栏目</param>
        /// <returns></returns>
        Task<IEnumerable<ContentBaseInfo>> GetContentList(NodeInfo node, string condition, string sort, int pageIndex, int pageSize, bool containAllChildNode = false);

        #endregion

        #region 读取内容信息

        /// <summary>
        /// 文章（审核的、可显示在前端的）数量
        /// </summary>
        int ArticleCount { get; }
        /// <summary>
        /// 读取内容完全信息（包含副表）
        /// </summary>
        /// <param name="contID"></param>
        /// <returns></returns>
        Task<ContentInfo> GetContentFull(int contID);

        /// <summary>
        /// 读取文章自己的栏目信息
        /// </summary>
        /// <param name="contID"></param>
        /// <returns></returns>
        Task<NodeInfo> GetSelfNode(int contID);

        #endregion

        #region 上一篇下一篇

        /// <summary>
        /// 上一篇
        /// </summary>
        /// <param name="contId"></param>
        /// <param name="nodeId"></param>
        /// <returns></returns>
        Task<ContentBaseInfo> GetPrevCont(int contId, int nodeId = 0);
        /// <summary>
        /// 下一篇
        /// </summary>
        /// <param name="contId"></param>
        /// <param name="nodeId"></param>
        /// <returns></returns>
        Task<ContentBaseInfo> GetNextCont(int contId, int nodeId = 0);

        #endregion

        /// <summary>
        /// 复制一篇文章并返回新的主键ID
        /// </summary>
        /// <param name="cont">源内容</param>
        /// <param name="Inputer">录入者</param>
        /// <returns></returns>
        Task<int> CopyToNewCont(ContentInfo cont, string Inputer);

        /// <summary>
        /// 读取所选内容的不重复栏目
        /// </summary>
        /// <param name="contIds"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        Task<IEnumerable<NodeInfo>> GetDistinctNodes(string contIds, int? status = null);
    }
}